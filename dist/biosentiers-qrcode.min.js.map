{"version":3,"sources":["biosentiers-qrcode.min.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","encode","data","options","bytes","version","_v","Error","format","convertBytesToNumeric","convertBytesToString","decode","convertNumericToBytes","convertStringToBytes","map","byte","String","fromCodePoint","_byte","ensureByte","join","string","split","char","charCodeAt","forEach","bitsString","toString","substring","length","_bignumber2","number","i","unshift","parseInt","slice","Object","defineProperty","value","undefined","_bignumber","bioqr","__WEBPACK_AMD_DEFINE_RESULT__","globalObj","constructorFactory","config","BigNumber","n","b","e","num","len","str","x","ERRORS","raise","isValidInt","round","DECIMAL_PLACES","ROUNDING_MODE","RegExp","ALPHABET","test","parseNumeric","s","replace","tooManyDigits","convertBase","isNumeric","indexOf","search","MAX_SAFE_INTEGER","mathfloor","MAX_EXP","MIN_EXP","LOG_BASE","push","baseOut","baseIn","sign","d","k","r","xc","y","dp","rm","toLowerCase","POW_PRECISION","pow","toBaseOut","toFixedPoint","coeffToString","pop","div","charAt","caller","c0","ne","roundingMode","TO_EXP_NEG","toExponential","maxOrMin","args","method","isArray","intValidatorWithErrors","min","max","name","truncate","normalise","j","msg","val","error","sd","ni","rd","pows10","POWS_TEN","out","mathceil","BASE","P","prototype","ONE","TO_EXP_POS","CRYPTO","MODULO_MODE","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","another","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","v","a","arguments","o","has","hasOwnProperty","MAX","intValidatorNoErrors","notBool","crypto","getRandomValues","randomBytes","lt","gt","random","pow2_53","random53bitInt","Math","rand","Uint32Array","copy","shift","multiply","base","temp","xlo","xhi","carry","klo","SQRT_BASE","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","ceil","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","divToInt","equals","eq","floor","greaterThan","greaterThanOrEqualTo","gte","isFinite","isInteger","isInt","isNegative","isNeg","isZero","lessThan","lessThanOrEqualTo","lte","minus","sub","t","xLTy","plus","xe","ye","reverse","modulo","mod","times","negated","neg","add","precision","z","squareRoot","sqrt","rep","half","mul","xcL","ycL","ylo","yhi","zc","sqrtBase","toDigits","toFixed","toFormat","arr","g1","g2","intPart","fractionPart","intDigits","substr","toFraction","md","d0","d2","exp","n0","n1","d1","toNumber","toPower","parseFloat","toPrecision","truncated","trunc","valueOf","toJSON","isBigNumber","l","arrL","encoder","_encoder2","_uint","FORMAT_VERSION","_utf8String","excursion","creatorName","CREATOR_NAME_LENGTH","EXCURSION_ID_LENGTH","_timestamp","date","EXCURSION_NAME_LENGTH","participant","PARTICIPANT_ID_LENGTH","PARTICIPANT_NAME_LENGTH","_bitmask","types","TYPES","zones","FORMAT_LENGTH","decoder","_decoder2","get","_encoder","_decoder","offset","values","references","bitmaskIndex","Number","mask","dateOrTimestamp","timestamp","getTime","_typeof","minutes","Date","Symbol","iterator","constructor","byteSize","bits","bound","bitShift","currentByte","stringLength","utf8Bytes","stringToUtf8Bytes","remainingBytes","_i","stringBytes","rawString","decodeURIComponent","escape","trim","unescape","encodeURIComponent","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","Encoder","encodeFunc","currentLength","_len","Array","_key","result","apply","Decoder","decodeFunc","lastArg"],"mappings":"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","file":"biosentiers-qrcode.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bioqr\"] = factory();\n\telse\n\t\troot[\"bioqr\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.decode = exports.encode = undefined;\n\t\n\tvar _bignumber = __webpack_require__(1);\n\t\n\tvar _bignumber2 = _interopRequireDefault(_bignumber);\n\t\n\tvar _v = __webpack_require__(2);\n\t\n\tvar _byte = __webpack_require__(8);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar bioqr = {\n\t  encode: encode,\n\t  decode: decode\n\t};\n\t\n\tfunction encode(data, options) {\n\t  options = options || {};\n\t\n\t  var bytes = void 0;\n\t  switch (data.version) {\n\t    case 1:\n\t      bytes = (0, _v.encode)(data, options);\n\t      break;\n\t    default:\n\t      throw new Error('Unknown format version ' + data.version);\n\t  }\n\t\n\t  if (options.format == 'numeric') {\n\t    return convertBytesToNumeric(bytes);\n\t  } else if (options.format == 'string') {\n\t    return convertBytesToString(bytes);\n\t  } else {\n\t    return bytes;\n\t  }\n\t}\n\t\n\tfunction decode(data, options) {\n\t  options = options || {};\n\t\n\t  var bytes = void 0;\n\t  if (options.format == 'numeric') {\n\t    bytes = convertNumericToBytes(data);\n\t  } else if (options.format == 'string' || typeof data == 'string') {\n\t    bytes = convertStringToBytes(data);\n\t  } else {\n\t    bytes = data;\n\t  }\n\t\n\t  var version = bytes[0];\n\t  switch (version) {\n\t    case 1:\n\t      return (0, _v.decode)(bytes, options);\n\t    default:\n\t      throw new Error('Data is not in a known format version ' + version);\n\t  }\n\t}\n\t\n\t/**\r\n\t * Converts a byte array to a string.\r\n\t */\n\tfunction convertBytesToString(bytes) {\n\t  return bytes.map(function (byte) {\n\t    return String.fromCodePoint((0, _byte.ensureByte)(byte));\n\t  }).join('');\n\t}\n\t\n\t/**\r\n\t * Converts a string to a byte array.\r\n\t */\n\tfunction convertStringToBytes(string) {\n\t  return string.split('').map(function (char) {\n\t    return char.charCodeAt(0);\n\t  });\n\t}\n\t\n\tfunction convertBytesToNumeric(bytes) {\n\t\n\t  var string = '';\n\t  bytes.forEach(function (byte) {\n\t    var bitsString = byte.toString(2);\n\t    string += '00000000'.substring(bitsString.length) + bitsString;\n\t  });\n\t\n\t  return new _bignumber2.default(string, 2).toString(10);\n\t}\n\t\n\tfunction convertNumericToBytes(number) {\n\t\n\t  var bytes = [];\n\t\n\t  var bitsString = new _bignumber2.default(number, 10).toString(2);\n\t  for (var i = bitsString.length; i > 0; i -= 8) {\n\t    if (i >= 8) {\n\t      bytes.unshift(parseInt(bitsString.slice(i - 8, i), 2));\n\t    } else {\n\t      bytes.unshift(parseInt(bitsString.slice(0, i), 2));\n\t    }\n\t  }\n\t\n\t  return bytes;\n\t}\n\t\n\texports.default = bioqr;\n\texports.encode = encode;\n\texports.decode = decode;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*! bignumber.js v4.0.1 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\t\r\n\t;(function (globalObj) {\r\n\t    'use strict';\r\n\t\r\n\t    /*\r\n\t      bignumber.js v4.0.1\r\n\t      A JavaScript library for arbitrary-precision arithmetic.\r\n\t      https://github.com/MikeMcl/bignumber.js\r\n\t      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n\t      MIT Expat Licence\r\n\t    */\r\n\t\r\n\t\r\n\t    var BigNumber,\r\n\t        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\t        mathceil = Math.ceil,\r\n\t        mathfloor = Math.floor,\r\n\t        notBool = ' not a boolean or binary digit',\r\n\t        roundingMode = 'rounding mode',\r\n\t        tooManyDigits = 'number type has more than 15 significant digits',\r\n\t        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n\t        BASE = 1e14,\r\n\t        LOG_BASE = 14,\r\n\t        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n\t        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n\t        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n\t        SQRT_BASE = 1e7,\r\n\t\r\n\t        /*\r\n\t         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n\t         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n\t         * exception is thrown (if ERRORS is true).\r\n\t         */\r\n\t        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\t\r\n\t\r\n\t    /*\r\n\t     * Create and return a BigNumber constructor.\r\n\t     */\r\n\t    function constructorFactory(config) {\r\n\t        var div, parseNumeric,\r\n\t\r\n\t            // id tracks the caller function, so its name can be included in error messages.\r\n\t            id = 0,\r\n\t            P = BigNumber.prototype,\r\n\t            ONE = new BigNumber(1),\r\n\t\r\n\t\r\n\t            /********************************* EDITABLE DEFAULTS **********************************/\r\n\t\r\n\t\r\n\t            /*\r\n\t             * The default values below must be integers within the inclusive ranges stated.\r\n\t             * The values can also be changed at run-time using BigNumber.config.\r\n\t             */\r\n\t\r\n\t            // The maximum number of decimal places for operations involving division.\r\n\t            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\t\r\n\t            /*\r\n\t             * The rounding mode used when rounding to the above decimal places, and when using\r\n\t             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n\t             * UP         0 Away from zero.\r\n\t             * DOWN       1 Towards zero.\r\n\t             * CEIL       2 Towards +Infinity.\r\n\t             * FLOOR      3 Towards -Infinity.\r\n\t             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n\t             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n\t             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n\t             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n\t             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n\t             */\r\n\t            ROUNDING_MODE = 4,                       // 0 to 8\r\n\t\r\n\t            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\t\r\n\t            // The exponent value at and beneath which toString returns exponential notation.\r\n\t            // Number type: -7\r\n\t            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\t\r\n\t            // The exponent value at and above which toString returns exponential notation.\r\n\t            // Number type: 21\r\n\t            TO_EXP_POS = 21,                         // 0 to MAX\r\n\t\r\n\t            // RANGE : [MIN_EXP, MAX_EXP]\r\n\t\r\n\t            // The minimum exponent value, beneath which underflow to zero occurs.\r\n\t            // Number type: -324  (5e-324)\r\n\t            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\t\r\n\t            // The maximum exponent value, above which overflow to Infinity occurs.\r\n\t            // Number type:  308  (1.7976931348623157e+308)\r\n\t            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n\t            MAX_EXP = 1e7,                           // 1 to MAX\r\n\t\r\n\t            // Whether BigNumber Errors are ever thrown.\r\n\t            ERRORS = true,                           // true or false\r\n\t\r\n\t            // Change to intValidatorNoErrors if ERRORS is false.\r\n\t            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\t\r\n\t            // Whether to use cryptographically-secure random number generation, if available.\r\n\t            CRYPTO = false,                          // true or false\r\n\t\r\n\t            /*\r\n\t             * The modulo mode used when calculating the modulus: a mod n.\r\n\t             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n\t             * The remainder (r) is calculated as: r = a - n * q.\r\n\t             *\r\n\t             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n\t             * DOWN      1 The remainder has the same sign as the dividend.\r\n\t             *             This modulo mode is commonly known as 'truncated division' and is\r\n\t             *             equivalent to (a % n) in JavaScript.\r\n\t             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n\t             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n\t             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n\t             *             The remainder is always positive.\r\n\t             *\r\n\t             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n\t             * modes are commonly used for the modulus operation.\r\n\t             * Although the other rounding modes can also be used, they may not give useful results.\r\n\t             */\r\n\t            MODULO_MODE = 1,                         // 0 to 9\r\n\t\r\n\t            // The maximum number of significant digits of the result of the toPower operation.\r\n\t            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n\t            POW_PRECISION = 0,                       // 0 to MAX\r\n\t\r\n\t            // The format specification used by the BigNumber.prototype.toFormat method.\r\n\t            FORMAT = {\r\n\t                decimalSeparator: '.',\r\n\t                groupSeparator: ',',\r\n\t                groupSize: 3,\r\n\t                secondaryGroupSize: 0,\r\n\t                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n\t                fractionGroupSize: 0\r\n\t            };\r\n\t\r\n\t\r\n\t        /******************************************************************************************/\r\n\t\r\n\t\r\n\t        // CONSTRUCTOR\r\n\t\r\n\t\r\n\t        /*\r\n\t         * The BigNumber constructor and exported function.\r\n\t         * Create and return a new instance of a BigNumber object.\r\n\t         *\r\n\t         * n {number|string|BigNumber} A numeric value.\r\n\t         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n\t         */\r\n\t        function BigNumber( n, b ) {\r\n\t            var c, e, i, num, len, str,\r\n\t                x = this;\r\n\t\r\n\t            // Enable constructor usage without new.\r\n\t            if ( !( x instanceof BigNumber ) ) {\r\n\t\r\n\t                // 'BigNumber() constructor call without new: {n}'\r\n\t                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n\t                return new BigNumber( n, b );\r\n\t            }\r\n\t\r\n\t            // 'new BigNumber() base not an integer: {b}'\r\n\t            // 'new BigNumber() base out of range: {b}'\r\n\t            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\t\r\n\t                // Duplicate.\r\n\t                if ( n instanceof BigNumber ) {\r\n\t                    x.s = n.s;\r\n\t                    x.e = n.e;\r\n\t                    x.c = ( n = n.c ) ? n.slice() : n;\r\n\t                    id = 0;\r\n\t                    return;\r\n\t                }\r\n\t\r\n\t                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n\t                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\t\r\n\t                    // Fast path for integers.\r\n\t                    if ( n === ~~n ) {\r\n\t                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n\t                        x.e = e;\r\n\t                        x.c = [n];\r\n\t                        id = 0;\r\n\t                        return;\r\n\t                    }\r\n\t\r\n\t                    str = n + '';\r\n\t                } else {\r\n\t                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n\t                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n\t                }\r\n\t            } else {\r\n\t                b = b | 0;\r\n\t                str = n + '';\r\n\t\r\n\t                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n\t                // Allow exponential notation to be used with base 10 argument.\r\n\t                if ( b == 10 ) {\r\n\t                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n\t                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n\t                }\r\n\t\r\n\t                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n\t                // Any number in exponential form will fail due to the [Ee][+-].\r\n\t                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n\t                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n\t                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n\t                    return parseNumeric( x, str, num, b );\r\n\t                }\r\n\t\r\n\t                if (num) {\r\n\t                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\t\r\n\t                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\t\r\n\t                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n\t                        raise( id, tooManyDigits, n );\r\n\t                    }\r\n\t\r\n\t                    // Prevent later check for length on converted number.\r\n\t                    num = false;\r\n\t                } else {\r\n\t                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n\t                }\r\n\t\r\n\t                str = convertBase( str, 10, b, x.s );\r\n\t            }\r\n\t\r\n\t            // Decimal point?\r\n\t            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\t\r\n\t            // Exponential form?\r\n\t            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\t\r\n\t                // Determine exponent.\r\n\t                if ( e < 0 ) e = i;\r\n\t                e += +str.slice( i + 1 );\r\n\t                str = str.substring( 0, i );\r\n\t            } else if ( e < 0 ) {\r\n\t\r\n\t                // Integer.\r\n\t                e = str.length;\r\n\t            }\r\n\t\r\n\t            // Determine leading zeros.\r\n\t            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\t\r\n\t            // Determine trailing zeros.\r\n\t            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n\t            str = str.slice( i, len + 1 );\r\n\t\r\n\t            if (str) {\r\n\t                len = str.length;\r\n\t\r\n\t                // Disallow numbers with over 15 significant digits if number type.\r\n\t                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n\t                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {\r\n\t                    raise( id, tooManyDigits, x.s * n );\r\n\t                }\r\n\t\r\n\t                e = e - i - 1;\r\n\t\r\n\t                 // Overflow?\r\n\t                if ( e > MAX_EXP ) {\r\n\t\r\n\t                    // Infinity.\r\n\t                    x.c = x.e = null;\r\n\t\r\n\t                // Underflow?\r\n\t                } else if ( e < MIN_EXP ) {\r\n\t\r\n\t                    // Zero.\r\n\t                    x.c = [ x.e = 0 ];\r\n\t                } else {\r\n\t                    x.e = e;\r\n\t                    x.c = [];\r\n\t\r\n\t                    // Transform base\r\n\t\r\n\t                    // e is the base 10 exponent.\r\n\t                    // i is where to slice str to get the first element of the coefficient array.\r\n\t                    i = ( e + 1 ) % LOG_BASE;\r\n\t                    if ( e < 0 ) i += LOG_BASE;\r\n\t\r\n\t                    if ( i < len ) {\r\n\t                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\t\r\n\t                        for ( len -= LOG_BASE; i < len; ) {\r\n\t                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n\t                        }\r\n\t\r\n\t                        str = str.slice(i);\r\n\t                        i = LOG_BASE - str.length;\r\n\t                    } else {\r\n\t                        i -= len;\r\n\t                    }\r\n\t\r\n\t                    for ( ; i--; str += '0' );\r\n\t                    x.c.push( +str );\r\n\t                }\r\n\t            } else {\r\n\t\r\n\t                // Zero.\r\n\t                x.c = [ x.e = 0 ];\r\n\t            }\r\n\t\r\n\t            id = 0;\r\n\t        }\r\n\t\r\n\t\r\n\t        // CONSTRUCTOR PROPERTIES\r\n\t\r\n\t\r\n\t        BigNumber.another = constructorFactory;\r\n\t\r\n\t        BigNumber.ROUND_UP = 0;\r\n\t        BigNumber.ROUND_DOWN = 1;\r\n\t        BigNumber.ROUND_CEIL = 2;\r\n\t        BigNumber.ROUND_FLOOR = 3;\r\n\t        BigNumber.ROUND_HALF_UP = 4;\r\n\t        BigNumber.ROUND_HALF_DOWN = 5;\r\n\t        BigNumber.ROUND_HALF_EVEN = 6;\r\n\t        BigNumber.ROUND_HALF_CEIL = 7;\r\n\t        BigNumber.ROUND_HALF_FLOOR = 8;\r\n\t        BigNumber.EUCLID = 9;\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Configure infrequently-changing library-wide settings.\r\n\t         *\r\n\t         * Accept an object or an argument list, with one or many of the following properties or\r\n\t         * parameters respectively:\r\n\t         *\r\n\t         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n\t         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n\t         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n\t         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n\t         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n\t         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n\t         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n\t         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n\t         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n\t         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n\t         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n\t         *      decimalSeparator       {string}\r\n\t         *      groupSeparator         {string}\r\n\t         *      groupSize              {number}\r\n\t         *      secondaryGroupSize     {number}\r\n\t         *      fractionGroupSeparator {string}\r\n\t         *      fractionGroupSize      {number}\r\n\t         *\r\n\t         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n\t         *\r\n\t         * E.g.\r\n\t         * BigNumber.config(20, 4) is equivalent to\r\n\t         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n\t         *\r\n\t         * Ignore properties/parameters set to null or undefined.\r\n\t         * Return an object with the properties current values.\r\n\t         */\r\n\t        BigNumber.config = BigNumber.set = function () {\r\n\t            var v, p,\r\n\t                i = 0,\r\n\t                r = {},\r\n\t                a = arguments,\r\n\t                o = a[0],\r\n\t                has = o && typeof o == 'object'\r\n\t                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n\t                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\t\r\n\t            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n\t            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n\t            // 'config() DECIMAL_PLACES out of range: {v}'\r\n\t            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n\t                DECIMAL_PLACES = v | 0;\r\n\t            }\r\n\t            r[p] = DECIMAL_PLACES;\r\n\t\r\n\t            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n\t            // 'config() ROUNDING_MODE not an integer: {v}'\r\n\t            // 'config() ROUNDING_MODE out of range: {v}'\r\n\t            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n\t                ROUNDING_MODE = v | 0;\r\n\t            }\r\n\t            r[p] = ROUNDING_MODE;\r\n\t\r\n\t            // EXPONENTIAL_AT {number|number[]}\r\n\t            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n\t            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n\t            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n\t            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\t\r\n\t                if ( isArray(v) ) {\r\n\t                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n\t                        TO_EXP_NEG = v[0] | 0;\r\n\t                        TO_EXP_POS = v[1] | 0;\r\n\t                    }\r\n\t                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n\t                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n\t                }\r\n\t            }\r\n\t            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\t\r\n\t            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n\t            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n\t            // 'config() RANGE not an integer: {v}'\r\n\t            // 'config() RANGE cannot be zero: {v}'\r\n\t            // 'config() RANGE out of range: {v}'\r\n\t            if ( has( p = 'RANGE' ) ) {\r\n\t\r\n\t                if ( isArray(v) ) {\r\n\t                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n\t                        MIN_EXP = v[0] | 0;\r\n\t                        MAX_EXP = v[1] | 0;\r\n\t                    }\r\n\t                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n\t                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n\t                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n\t                }\r\n\t            }\r\n\t            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\t\r\n\t            // ERRORS {boolean|number} true, false, 1 or 0.\r\n\t            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n\t            if ( has( p = 'ERRORS' ) ) {\r\n\t\r\n\t                if ( v === !!v || v === 1 || v === 0 ) {\r\n\t                    id = 0;\r\n\t                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n\t                } else if (ERRORS) {\r\n\t                    raise( 2, p + notBool, v );\r\n\t                }\r\n\t            }\r\n\t            r[p] = ERRORS;\r\n\t\r\n\t            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n\t            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n\t            // 'config() crypto unavailable: {crypto}'\r\n\t            if ( has( p = 'CRYPTO' ) ) {\r\n\t\r\n\t                if ( v === true || v === false || v === 1 || v === 0 ) {\r\n\t                    if (v) {\r\n\t                        v = typeof crypto == 'undefined';\r\n\t                        if ( !v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\r\n\t                            CRYPTO = true;\r\n\t                        } else if (ERRORS) {\r\n\t                            raise( 2, 'crypto unavailable', v ? void 0 : crypto );\r\n\t                        } else {\r\n\t                            CRYPTO = false;\r\n\t                        }\r\n\t                    } else {\r\n\t                        CRYPTO = false;\r\n\t                    }\r\n\t                } else if (ERRORS) {\r\n\t                    raise( 2, p + notBool, v );\r\n\t                }\r\n\t            }\r\n\t            r[p] = CRYPTO;\r\n\t\r\n\t            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n\t            // 'config() MODULO_MODE not an integer: {v}'\r\n\t            // 'config() MODULO_MODE out of range: {v}'\r\n\t            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n\t                MODULO_MODE = v | 0;\r\n\t            }\r\n\t            r[p] = MODULO_MODE;\r\n\t\r\n\t            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n\t            // 'config() POW_PRECISION not an integer: {v}'\r\n\t            // 'config() POW_PRECISION out of range: {v}'\r\n\t            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n\t                POW_PRECISION = v | 0;\r\n\t            }\r\n\t            r[p] = POW_PRECISION;\r\n\t\r\n\t            // FORMAT {object}\r\n\t            // 'config() FORMAT not an object: {v}'\r\n\t            if ( has( p = 'FORMAT' ) ) {\r\n\t\r\n\t                if ( typeof v == 'object' ) {\r\n\t                    FORMAT = v;\r\n\t                } else if (ERRORS) {\r\n\t                    raise( 2, p + ' not an object', v );\r\n\t                }\r\n\t            }\r\n\t            r[p] = FORMAT;\r\n\t\r\n\t            return r;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the maximum of the arguments.\r\n\t         *\r\n\t         * arguments {number|string|BigNumber}\r\n\t         */\r\n\t        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the minimum of the arguments.\r\n\t         *\r\n\t         * arguments {number|string|BigNumber}\r\n\t         */\r\n\t        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n\t         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n\t         * zeros are produced).\r\n\t         *\r\n\t         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t         *\r\n\t         * 'random() decimal places not an integer: {dp}'\r\n\t         * 'random() decimal places out of range: {dp}'\r\n\t         * 'random() crypto unavailable: {crypto}'\r\n\t         */\r\n\t        BigNumber.random = (function () {\r\n\t            var pow2_53 = 0x20000000000000;\r\n\t\r\n\t            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n\t            // Check if Math.random() produces more than 32 bits of randomness.\r\n\t            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n\t            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n\t            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n\t              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n\t              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n\t                  (Math.random() * 0x800000 | 0); };\r\n\t\r\n\t            return function (dp) {\r\n\t                var a, b, e, k, v,\r\n\t                    i = 0,\r\n\t                    c = [],\r\n\t                    rand = new BigNumber(ONE);\r\n\t\r\n\t                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n\t                k = mathceil( dp / LOG_BASE );\r\n\t\r\n\t                if (CRYPTO) {\r\n\t\r\n\t                    // Browsers supporting crypto.getRandomValues.\r\n\t                    if (crypto.getRandomValues) {\r\n\t\r\n\t                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\t\r\n\t                        for ( ; i < k; ) {\r\n\t\r\n\t                            // 53 bits:\r\n\t                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n\t                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n\t                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n\t                            //                                     11111 11111111 11111111\r\n\t                            // 0x20000 is 2^21.\r\n\t                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\t\r\n\t                            // Rejection sampling:\r\n\t                            // 0 <= v < 9007199254740992\r\n\t                            // Probability that v >= 9e15, is\r\n\t                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n\t                            if ( v >= 9e15 ) {\r\n\t                                b = crypto.getRandomValues( new Uint32Array(2) );\r\n\t                                a[i] = b[0];\r\n\t                                a[i + 1] = b[1];\r\n\t                            } else {\r\n\t\r\n\t                                // 0 <= v <= 8999999999999999\r\n\t                                // 0 <= (v % 1e14) <= 99999999999999\r\n\t                                c.push( v % 1e14 );\r\n\t                                i += 2;\r\n\t                            }\r\n\t                        }\r\n\t                        i = k / 2;\r\n\t\r\n\t                    // Node.js supporting crypto.randomBytes.\r\n\t                    } else if (crypto.randomBytes) {\r\n\t\r\n\t                        // buffer\r\n\t                        a = crypto.randomBytes( k *= 7 );\r\n\t\r\n\t                        for ( ; i < k; ) {\r\n\t\r\n\t                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n\t                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n\t                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n\t                            // 0 <= v < 9007199254740992\r\n\t                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n\t                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n\t                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\t\r\n\t                            if ( v >= 9e15 ) {\r\n\t                                crypto.randomBytes(7).copy( a, i );\r\n\t                            } else {\r\n\t\r\n\t                                // 0 <= (v % 1e14) <= 99999999999999\r\n\t                                c.push( v % 1e14 );\r\n\t                                i += 7;\r\n\t                            }\r\n\t                        }\r\n\t                        i = k / 7;\r\n\t                    } else {\r\n\t                        CRYPTO = false;\r\n\t                        if (ERRORS) raise( 14, 'crypto unavailable', crypto );\r\n\t                    }\r\n\t                }\r\n\t\r\n\t                // Use Math.random.\r\n\t                if (!CRYPTO) {\r\n\t\r\n\t                    for ( ; i < k; ) {\r\n\t                        v = random53bitInt();\r\n\t                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n\t                    }\r\n\t                }\r\n\t\r\n\t                k = c[--i];\r\n\t                dp %= LOG_BASE;\r\n\t\r\n\t                // Convert trailing digits to zeros according to dp.\r\n\t                if ( k && dp ) {\r\n\t                    v = POWS_TEN[LOG_BASE - dp];\r\n\t                    c[i] = mathfloor( k / v ) * v;\r\n\t                }\r\n\t\r\n\t                // Remove trailing elements which are zero.\r\n\t                for ( ; c[i] === 0; c.pop(), i-- );\r\n\t\r\n\t                // Zero?\r\n\t                if ( i < 0 ) {\r\n\t                    c = [ e = 0 ];\r\n\t                } else {\r\n\t\r\n\t                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n\t                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);\r\n\t\r\n\t                    // Count the digits of the first element of c to determine leading zeros, and...\r\n\t                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\t\r\n\t                    // adjust the exponent accordingly.\r\n\t                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n\t                }\r\n\t\r\n\t                rand.e = e;\r\n\t                rand.c = c;\r\n\t                return rand;\r\n\t            };\r\n\t        })();\r\n\t\r\n\t\r\n\t        // PRIVATE FUNCTIONS\r\n\t\r\n\t\r\n\t        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n\t        function convertBase( str, baseOut, baseIn, sign ) {\r\n\t            var d, e, k, r, x, xc, y,\r\n\t                i = str.indexOf( '.' ),\r\n\t                dp = DECIMAL_PLACES,\r\n\t                rm = ROUNDING_MODE;\r\n\t\r\n\t            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\t\r\n\t            // Non-integer.\r\n\t            if ( i >= 0 ) {\r\n\t                k = POW_PRECISION;\r\n\t\r\n\t                // Unlimited precision.\r\n\t                POW_PRECISION = 0;\r\n\t                str = str.replace( '.', '' );\r\n\t                y = new BigNumber(baseIn);\r\n\t                x = y.pow( str.length - i );\r\n\t                POW_PRECISION = k;\r\n\t\r\n\t                // Convert str as if an integer, then restore the fraction part by dividing the\r\n\t                // result by its base raised to a power.\r\n\t                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n\t                y.e = y.c.length;\r\n\t            }\r\n\t\r\n\t            // Convert the number as integer.\r\n\t            xc = toBaseOut( str, baseIn, baseOut );\r\n\t            e = k = xc.length;\r\n\t\r\n\t            // Remove trailing zeros.\r\n\t            for ( ; xc[--k] == 0; xc.pop() );\r\n\t            if ( !xc[0] ) return '0';\r\n\t\r\n\t            if ( i < 0 ) {\r\n\t                --e;\r\n\t            } else {\r\n\t                x.c = xc;\r\n\t                x.e = e;\r\n\t\r\n\t                // sign is needed for correct rounding.\r\n\t                x.s = sign;\r\n\t                x = div( x, y, dp, rm, baseOut );\r\n\t                xc = x.c;\r\n\t                r = x.r;\r\n\t                e = x.e;\r\n\t            }\r\n\t\r\n\t            d = e + dp + 1;\r\n\t\r\n\t            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n\t            i = xc[d];\r\n\t            k = baseOut / 2;\r\n\t            r = r || d < 0 || xc[d + 1] != null;\r\n\t\r\n\t            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n\t                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n\t                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\t\r\n\t            if ( d < 1 || !xc[0] ) {\r\n\t\r\n\t                // 1^-dp or 0.\r\n\t                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n\t            } else {\r\n\t                xc.length = d;\r\n\t\r\n\t                if (r) {\r\n\t\r\n\t                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n\t                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n\t                        xc[d] = 0;\r\n\t\r\n\t                        if ( !d ) {\r\n\t                            ++e;\r\n\t                            xc.unshift(1);\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t\r\n\t                // Determine trailing zeros.\r\n\t                for ( k = xc.length; !xc[--k]; );\r\n\t\r\n\t                // E.g. [4, 11, 15] becomes 4bf.\r\n\t                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n\t                str = toFixedPoint( str, e );\r\n\t            }\r\n\t\r\n\t            // The caller will add the sign.\r\n\t            return str;\r\n\t        }\r\n\t\r\n\t\r\n\t        // Perform division in the specified base. Called by div and convertBase.\r\n\t        div = (function () {\r\n\t\r\n\t            // Assume non-zero x and k.\r\n\t            function multiply( x, k, base ) {\r\n\t                var m, temp, xlo, xhi,\r\n\t                    carry = 0,\r\n\t                    i = x.length,\r\n\t                    klo = k % SQRT_BASE,\r\n\t                    khi = k / SQRT_BASE | 0;\r\n\t\r\n\t                for ( x = x.slice(); i--; ) {\r\n\t                    xlo = x[i] % SQRT_BASE;\r\n\t                    xhi = x[i] / SQRT_BASE | 0;\r\n\t                    m = khi * xlo + xhi * klo;\r\n\t                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n\t                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n\t                    x[i] = temp % base;\r\n\t                }\r\n\t\r\n\t                if (carry) x.unshift(carry);\r\n\t\r\n\t                return x;\r\n\t            }\r\n\t\r\n\t            function compare( a, b, aL, bL ) {\r\n\t                var i, cmp;\r\n\t\r\n\t                if ( aL != bL ) {\r\n\t                    cmp = aL > bL ? 1 : -1;\r\n\t                } else {\r\n\t\r\n\t                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\t\r\n\t                        if ( a[i] != b[i] ) {\r\n\t                            cmp = a[i] > b[i] ? 1 : -1;\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                return cmp;\r\n\t            }\r\n\t\r\n\t            function subtract( a, b, aL, base ) {\r\n\t                var i = 0;\r\n\t\r\n\t                // Subtract b from a.\r\n\t                for ( ; aL--; ) {\r\n\t                    a[aL] -= i;\r\n\t                    i = a[aL] < b[aL] ? 1 : 0;\r\n\t                    a[aL] = i * base + a[aL] - b[aL];\r\n\t                }\r\n\t\r\n\t                // Remove leading zeros.\r\n\t                for ( ; !a[0] && a.length > 1; a.shift() );\r\n\t            }\r\n\t\r\n\t            // x: dividend, y: divisor.\r\n\t            return function ( x, y, dp, rm, base ) {\r\n\t                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n\t                    yL, yz,\r\n\t                    s = x.s == y.s ? 1 : -1,\r\n\t                    xc = x.c,\r\n\t                    yc = y.c;\r\n\t\r\n\t                // Either NaN, Infinity or 0?\r\n\t                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\t\r\n\t                    return new BigNumber(\r\n\t\r\n\t                      // Return NaN if either NaN, or both Infinity or 0.\r\n\t                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\t\r\n\t                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n\t                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n\t                    );\r\n\t                }\r\n\t\r\n\t                q = new BigNumber(s);\r\n\t                qc = q.c = [];\r\n\t                e = x.e - y.e;\r\n\t                s = dp + e + 1;\r\n\t\r\n\t                if ( !base ) {\r\n\t                    base = BASE;\r\n\t                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n\t                    s = s / LOG_BASE | 0;\r\n\t                }\r\n\t\r\n\t                // Result exponent may be one less then the current value of e.\r\n\t                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n\t                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n\t                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\t\r\n\t                if ( s < 0 ) {\r\n\t                    qc.push(1);\r\n\t                    more = true;\r\n\t                } else {\r\n\t                    xL = xc.length;\r\n\t                    yL = yc.length;\r\n\t                    i = 0;\r\n\t                    s += 2;\r\n\t\r\n\t                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\t\r\n\t                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\t\r\n\t                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n\t                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n\t                    if ( n > 1 ) {\r\n\t                        yc = multiply( yc, n, base );\r\n\t                        xc = multiply( xc, n, base );\r\n\t                        yL = yc.length;\r\n\t                        xL = xc.length;\r\n\t                    }\r\n\t\r\n\t                    xi = yL;\r\n\t                    rem = xc.slice( 0, yL );\r\n\t                    remL = rem.length;\r\n\t\r\n\t                    // Add zeros to make remainder as long as divisor.\r\n\t                    for ( ; remL < yL; rem[remL++] = 0 );\r\n\t                    yz = yc.slice();\r\n\t                    yz.unshift(0);\r\n\t                    yc0 = yc[0];\r\n\t                    if ( yc[1] >= base / 2 ) yc0++;\r\n\t                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n\t                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\t\r\n\t                    do {\r\n\t                        n = 0;\r\n\t\r\n\t                        // Compare divisor and remainder.\r\n\t                        cmp = compare( yc, rem, yL, remL );\r\n\t\r\n\t                        // If divisor < remainder.\r\n\t                        if ( cmp < 0 ) {\r\n\t\r\n\t                            // Calculate trial digit, n.\r\n\t\r\n\t                            rem0 = rem[0];\r\n\t                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\t\r\n\t                            // n is how many times the divisor goes into the current remainder.\r\n\t                            n = mathfloor( rem0 / yc0 );\r\n\t\r\n\t                            //  Algorithm:\r\n\t                            //  1. product = divisor * trial digit (n)\r\n\t                            //  2. if product > remainder: product -= divisor, n--\r\n\t                            //  3. remainder -= product\r\n\t                            //  4. if product was < remainder at 2:\r\n\t                            //    5. compare new remainder and divisor\r\n\t                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\t\r\n\t                            if ( n > 1 ) {\r\n\t\r\n\t                                // n may be > base only when base is 3.\r\n\t                                if (n >= base) n = base - 1;\r\n\t\r\n\t                                // product = divisor * trial digit.\r\n\t                                prod = multiply( yc, n, base );\r\n\t                                prodL = prod.length;\r\n\t                                remL = rem.length;\r\n\t\r\n\t                                // Compare product and remainder.\r\n\t                                // If product > remainder.\r\n\t                                // Trial digit n too high.\r\n\t                                // n is 1 too high about 5% of the time, and is not known to have\r\n\t                                // ever been more than 1 too high.\r\n\t                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n\t                                    n--;\r\n\t\r\n\t                                    // Subtract divisor from product.\r\n\t                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n\t                                    prodL = prod.length;\r\n\t                                    cmp = 1;\r\n\t                                }\r\n\t                            } else {\r\n\t\r\n\t                                // n is 0 or 1, cmp is -1.\r\n\t                                // If n is 0, there is no need to compare yc and rem again below,\r\n\t                                // so change cmp to 1 to avoid it.\r\n\t                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n\t                                if ( n == 0 ) {\r\n\t\r\n\t                                    // divisor < remainder, so n must be at least 1.\r\n\t                                    cmp = n = 1;\r\n\t                                }\r\n\t\r\n\t                                // product = divisor\r\n\t                                prod = yc.slice();\r\n\t                                prodL = prod.length;\r\n\t                            }\r\n\t\r\n\t                            if ( prodL < remL ) prod.unshift(0);\r\n\t\r\n\t                            // Subtract product from remainder.\r\n\t                            subtract( rem, prod, remL, base );\r\n\t                            remL = rem.length;\r\n\t\r\n\t                             // If product was < remainder.\r\n\t                            if ( cmp == -1 ) {\r\n\t\r\n\t                                // Compare divisor and new remainder.\r\n\t                                // If divisor < new remainder, subtract divisor from remainder.\r\n\t                                // Trial digit n too low.\r\n\t                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n\t                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n\t                                    n++;\r\n\t\r\n\t                                    // Subtract divisor from remainder.\r\n\t                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n\t                                    remL = rem.length;\r\n\t                                }\r\n\t                            }\r\n\t                        } else if ( cmp === 0 ) {\r\n\t                            n++;\r\n\t                            rem = [0];\r\n\t                        } // else cmp === 1 and n will be 0\r\n\t\r\n\t                        // Add the next digit, n, to the result array.\r\n\t                        qc[i++] = n;\r\n\t\r\n\t                        // Update the remainder.\r\n\t                        if ( rem[0] ) {\r\n\t                            rem[remL++] = xc[xi] || 0;\r\n\t                        } else {\r\n\t                            rem = [ xc[xi] ];\r\n\t                            remL = 1;\r\n\t                        }\r\n\t                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\t\r\n\t                    more = rem[0] != null;\r\n\t\r\n\t                    // Leading zero?\r\n\t                    if ( !qc[0] ) qc.shift();\r\n\t                }\r\n\t\r\n\t                if ( base == BASE ) {\r\n\t\r\n\t                    // To calculate q.e, first get the number of digits of qc[0].\r\n\t                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n\t                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\t\r\n\t                // Caller is convertBase.\r\n\t                } else {\r\n\t                    q.e = e;\r\n\t                    q.r = +more;\r\n\t                }\r\n\t\r\n\t                return q;\r\n\t            };\r\n\t        })();\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n\t         * notation rounded to the specified decimal places or significant digits.\r\n\t         *\r\n\t         * n is a BigNumber.\r\n\t         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n\t         * rm is the rounding mode.\r\n\t         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n\t         */\r\n\t        function format( n, i, rm, caller ) {\r\n\t            var c0, e, ne, len, str;\r\n\t\r\n\t            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n\t              ? rm | 0 : ROUNDING_MODE;\r\n\t\r\n\t            if ( !n.c ) return n.toString();\r\n\t            c0 = n.c[0];\r\n\t            ne = n.e;\r\n\t\r\n\t            if ( i == null ) {\r\n\t                str = coeffToString( n.c );\r\n\t                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n\t                  ? toExponential( str, ne )\r\n\t                  : toFixedPoint( str, ne );\r\n\t            } else {\r\n\t                n = round( new BigNumber(n), i, rm );\r\n\t\r\n\t                // n.e may have changed if the value was rounded up.\r\n\t                e = n.e;\r\n\t\r\n\t                str = coeffToString( n.c );\r\n\t                len = str.length;\r\n\t\r\n\t                // toPrecision returns exponential notation if the number of significant digits\r\n\t                // specified is less than the number of digits necessary to represent the integer\r\n\t                // part of the value in fixed-point notation.\r\n\t\r\n\t                // Exponential notation.\r\n\t                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\t\r\n\t                    // Append zeros?\r\n\t                    for ( ; len < i; str += '0', len++ );\r\n\t                    str = toExponential( str, e );\r\n\t\r\n\t                // Fixed-point notation.\r\n\t                } else {\r\n\t                    i -= ne;\r\n\t                    str = toFixedPoint( str, e );\r\n\t\r\n\t                    // Append zeros?\r\n\t                    if ( e + 1 > len ) {\r\n\t                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n\t                    } else {\r\n\t                        i += e - len;\r\n\t                        if ( i > 0 ) {\r\n\t                            if ( e + 1 == len ) str += '.';\r\n\t                            for ( ; i--; str += '0' );\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t\r\n\t            return n.s < 0 && c0 ? '-' + str : str;\r\n\t        }\r\n\t\r\n\t\r\n\t        // Handle BigNumber.max and BigNumber.min.\r\n\t        function maxOrMin( args, method ) {\r\n\t            var m, n,\r\n\t                i = 0;\r\n\t\r\n\t            if ( isArray( args[0] ) ) args = args[0];\r\n\t            m = new BigNumber( args[0] );\r\n\t\r\n\t            for ( ; ++i < args.length; ) {\r\n\t                n = new BigNumber( args[i] );\r\n\t\r\n\t                // If any number is NaN, return NaN.\r\n\t                if ( !n.s ) {\r\n\t                    m = n;\r\n\t                    break;\r\n\t                } else if ( method.call( m, n ) ) {\r\n\t                    m = n;\r\n\t                }\r\n\t            }\r\n\t\r\n\t            return m;\r\n\t        }\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if n is an integer in range, otherwise throw.\r\n\t         * Use for argument validation when ERRORS is true.\r\n\t         */\r\n\t        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n\t            if ( n < min || n > max || n != truncate(n) ) {\r\n\t                raise( caller, ( name || 'decimal places' ) +\r\n\t                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n\t            }\r\n\t\r\n\t            return true;\r\n\t        }\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n\t         * Called by minus, plus and times.\r\n\t         */\r\n\t        function normalise( n, c, e ) {\r\n\t            var i = 1,\r\n\t                j = c.length;\r\n\t\r\n\t             // Remove trailing zeros.\r\n\t            for ( ; !c[--j]; c.pop() );\r\n\t\r\n\t            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n\t            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\t\r\n\t            // Overflow?\r\n\t            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\t\r\n\t                // Infinity.\r\n\t                n.c = n.e = null;\r\n\t\r\n\t            // Underflow?\r\n\t            } else if ( e < MIN_EXP ) {\r\n\t\r\n\t                // Zero.\r\n\t                n.c = [ n.e = 0 ];\r\n\t            } else {\r\n\t                n.e = e;\r\n\t                n.c = c;\r\n\t            }\r\n\t\r\n\t            return n;\r\n\t        }\r\n\t\r\n\t\r\n\t        // Handle values that fail the validity test in BigNumber.\r\n\t        parseNumeric = (function () {\r\n\t            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n\t                dotAfter = /^([^.]+)\\.$/,\r\n\t                dotBefore = /^\\.([^.]+)$/,\r\n\t                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n\t                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\t\r\n\t            return function ( x, str, num, b ) {\r\n\t                var base,\r\n\t                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\t\r\n\t                // No exception on ±Infinity or NaN.\r\n\t                if ( isInfinityOrNaN.test(s) ) {\r\n\t                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n\t                } else {\r\n\t                    if ( !num ) {\r\n\t\r\n\t                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n\t                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n\t                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n\t                            return !b || b == base ? p1 : m;\r\n\t                        });\r\n\t\r\n\t                        if (b) {\r\n\t                            base = b;\r\n\t\r\n\t                            // E.g. '1.' to '1', '.1' to '0.1'\r\n\t                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n\t                        }\r\n\t\r\n\t                        if ( str != s ) return new BigNumber( s, base );\r\n\t                    }\r\n\t\r\n\t                    // 'new BigNumber() not a number: {n}'\r\n\t                    // 'new BigNumber() not a base {b} number: {n}'\r\n\t                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n\t                    x.s = null;\r\n\t                }\r\n\t\r\n\t                x.c = x.e = null;\r\n\t                id = 0;\r\n\t            }\r\n\t        })();\r\n\t\r\n\t\r\n\t        // Throw a BigNumber Error.\r\n\t        function raise( caller, msg, val ) {\r\n\t            var error = new Error( [\r\n\t                'new BigNumber',     // 0\r\n\t                'cmp',               // 1\r\n\t                'config',            // 2\r\n\t                'div',               // 3\r\n\t                'divToInt',          // 4\r\n\t                'eq',                // 5\r\n\t                'gt',                // 6\r\n\t                'gte',               // 7\r\n\t                'lt',                // 8\r\n\t                'lte',               // 9\r\n\t                'minus',             // 10\r\n\t                'mod',               // 11\r\n\t                'plus',              // 12\r\n\t                'precision',         // 13\r\n\t                'random',            // 14\r\n\t                'round',             // 15\r\n\t                'shift',             // 16\r\n\t                'times',             // 17\r\n\t                'toDigits',          // 18\r\n\t                'toExponential',     // 19\r\n\t                'toFixed',           // 20\r\n\t                'toFormat',          // 21\r\n\t                'toFraction',        // 22\r\n\t                'pow',               // 23\r\n\t                'toPrecision',       // 24\r\n\t                'toString',          // 25\r\n\t                'BigNumber'          // 26\r\n\t            ][caller] + '() ' + msg + ': ' + val );\r\n\t\r\n\t            error.name = 'BigNumber Error';\r\n\t            id = 0;\r\n\t            throw error;\r\n\t        }\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n\t         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n\t         */\r\n\t        function round( x, sd, rm, r ) {\r\n\t            var d, i, j, k, n, ni, rd,\r\n\t                xc = x.c,\r\n\t                pows10 = POWS_TEN;\r\n\t\r\n\t            // if x is not Infinity or NaN...\r\n\t            if (xc) {\r\n\t\r\n\t                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n\t                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n\t                // ni is the index of n within x.c.\r\n\t                // d is the number of digits of n.\r\n\t                // i is the index of rd within n including leading zeros.\r\n\t                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n\t                out: {\r\n\t\r\n\t                    // Get the number of digits of the first element of xc.\r\n\t                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n\t                    i = sd - d;\r\n\t\r\n\t                    // If the rounding digit is in the first element of xc...\r\n\t                    if ( i < 0 ) {\r\n\t                        i += LOG_BASE;\r\n\t                        j = sd;\r\n\t                        n = xc[ ni = 0 ];\r\n\t\r\n\t                        // Get the rounding digit at index j of n.\r\n\t                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n\t                    } else {\r\n\t                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\t\r\n\t                        if ( ni >= xc.length ) {\r\n\t\r\n\t                            if (r) {\r\n\t\r\n\t                                // Needed by sqrt.\r\n\t                                for ( ; xc.length <= ni; xc.push(0) );\r\n\t                                n = rd = 0;\r\n\t                                d = 1;\r\n\t                                i %= LOG_BASE;\r\n\t                                j = i - LOG_BASE + 1;\r\n\t                            } else {\r\n\t                                break out;\r\n\t                            }\r\n\t                        } else {\r\n\t                            n = k = xc[ni];\r\n\t\r\n\t                            // Get the number of digits of n.\r\n\t                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\t\r\n\t                            // Get the index of rd within n.\r\n\t                            i %= LOG_BASE;\r\n\t\r\n\t                            // Get the index of rd within n, adjusted for leading zeros.\r\n\t                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n\t                            j = i - LOG_BASE + d;\r\n\t\r\n\t                            // Get the rounding digit at index j of n.\r\n\t                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n\t                        }\r\n\t                    }\r\n\t\r\n\t                    r = r || sd < 0 ||\r\n\t\r\n\t                    // Are there any non-zero digits after the rounding digit?\r\n\t                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n\t                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n\t                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\t\r\n\t                    r = rm < 4\r\n\t                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n\t                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\t\r\n\t                        // Check whether the digit to the left of the rounding digit is odd.\r\n\t                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n\t                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\t\r\n\t                    if ( sd < 1 || !xc[0] ) {\r\n\t                        xc.length = 0;\r\n\t\r\n\t                        if (r) {\r\n\t\r\n\t                            // Convert sd to decimal places.\r\n\t                            sd -= x.e + 1;\r\n\t\r\n\t                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n\t                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];\r\n\t                            x.e = -sd || 0;\r\n\t                        } else {\r\n\t\r\n\t                            // Zero.\r\n\t                            xc[0] = x.e = 0;\r\n\t                        }\r\n\t\r\n\t                        return x;\r\n\t                    }\r\n\t\r\n\t                    // Remove excess digits.\r\n\t                    if ( i == 0 ) {\r\n\t                        xc.length = ni;\r\n\t                        k = 1;\r\n\t                        ni--;\r\n\t                    } else {\r\n\t                        xc.length = ni + 1;\r\n\t                        k = pows10[ LOG_BASE - i ];\r\n\t\r\n\t                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n\t                        // j > 0 means i > number of leading zeros of n.\r\n\t                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n\t                    }\r\n\t\r\n\t                    // Round up?\r\n\t                    if (r) {\r\n\t\r\n\t                        for ( ; ; ) {\r\n\t\r\n\t                            // If the digit to be rounded up is in the first element of xc...\r\n\t                            if ( ni == 0 ) {\r\n\t\r\n\t                                // i will be the length of xc[0] before k is added.\r\n\t                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n\t                                j = xc[0] += k;\r\n\t                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\t\r\n\t                                // if i != k the length has increased.\r\n\t                                if ( i != k ) {\r\n\t                                    x.e++;\r\n\t                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n\t                                }\r\n\t\r\n\t                                break;\r\n\t                            } else {\r\n\t                                xc[ni] += k;\r\n\t                                if ( xc[ni] != BASE ) break;\r\n\t                                xc[ni--] = 0;\r\n\t                                k = 1;\r\n\t                            }\r\n\t                        }\r\n\t                    }\r\n\t\r\n\t                    // Remove trailing zeros.\r\n\t                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n\t                }\r\n\t\r\n\t                // Overflow? Infinity.\r\n\t                if ( x.e > MAX_EXP ) {\r\n\t                    x.c = x.e = null;\r\n\t\r\n\t                // Underflow? Zero.\r\n\t                } else if ( x.e < MIN_EXP ) {\r\n\t                    x.c = [ x.e = 0 ];\r\n\t                }\r\n\t            }\r\n\t\r\n\t            return x;\r\n\t        }\r\n\t\r\n\t\r\n\t        // PROTOTYPE/INSTANCE METHODS\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n\t         */\r\n\t        P.absoluteValue = P.abs = function () {\r\n\t            var x = new BigNumber(this);\r\n\t            if ( x.s < 0 ) x.s = 1;\r\n\t            return x;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n\t         * number in the direction of Infinity.\r\n\t         */\r\n\t        P.ceil = function () {\r\n\t            return round( new BigNumber(this), this.e + 1, 2 );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return\r\n\t         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n\t         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n\t         * 0 if they have the same value,\r\n\t         * or null if the value of either is NaN.\r\n\t         */\r\n\t        P.comparedTo = P.cmp = function ( y, b ) {\r\n\t            id = 1;\r\n\t            return compare( this, new BigNumber( y, b ) );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n\t         * of this BigNumber is ±Infinity or NaN.\r\n\t         */\r\n\t        P.decimalPlaces = P.dp = function () {\r\n\t            var n, v,\r\n\t                c = this.c;\r\n\t\r\n\t            if ( !c ) return null;\r\n\t            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\t\r\n\t            // Subtract the number of trailing zeros of the last number.\r\n\t            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n\t            if ( n < 0 ) n = 0;\r\n\t\r\n\t            return n;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         *  n / 0 = I\r\n\t         *  n / N = N\r\n\t         *  n / I = 0\r\n\t         *  0 / n = 0\r\n\t         *  0 / 0 = N\r\n\t         *  0 / N = N\r\n\t         *  0 / I = 0\r\n\t         *  N / n = N\r\n\t         *  N / 0 = N\r\n\t         *  N / N = N\r\n\t         *  N / I = N\r\n\t         *  I / n = I\r\n\t         *  I / 0 = I\r\n\t         *  I / N = N\r\n\t         *  I / I = N\r\n\t         *\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n\t         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t         */\r\n\t        P.dividedBy = P.div = function ( y, b ) {\r\n\t            id = 3;\r\n\t            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n\t         * BigNumber by the value of BigNumber(y, b).\r\n\t         */\r\n\t        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n\t            id = 4;\r\n\t            return div( this, new BigNumber( y, b ), 0, 1 );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n\t         * otherwise returns false.\r\n\t         */\r\n\t        P.equals = P.eq = function ( y, b ) {\r\n\t            id = 5;\r\n\t            return compare( this, new BigNumber( y, b ) ) === 0;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n\t         * number in the direction of -Infinity.\r\n\t         */\r\n\t        P.floor = function () {\r\n\t            return round( new BigNumber(this), this.e + 1, 3 );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n\t         * otherwise returns false.\r\n\t         */\r\n\t        P.greaterThan = P.gt = function ( y, b ) {\r\n\t            id = 6;\r\n\t            return compare( this, new BigNumber( y, b ) ) > 0;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n\t         * BigNumber(y, b), otherwise returns false.\r\n\t         */\r\n\t        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n\t            id = 7;\r\n\t            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\t\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n\t         */\r\n\t        P.isFinite = function () {\r\n\t            return !!this.c;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n\t         */\r\n\t        P.isInteger = P.isInt = function () {\r\n\t            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n\t         */\r\n\t        P.isNaN = function () {\r\n\t            return !this.s;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n\t         */\r\n\t        P.isNegative = P.isNeg = function () {\r\n\t            return this.s < 0;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n\t         */\r\n\t        P.isZero = function () {\r\n\t            return !!this.c && this.c[0] == 0;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n\t         * otherwise returns false.\r\n\t         */\r\n\t        P.lessThan = P.lt = function ( y, b ) {\r\n\t            id = 8;\r\n\t            return compare( this, new BigNumber( y, b ) ) < 0;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return true if the value of this BigNumber is less than or equal to the value of\r\n\t         * BigNumber(y, b), otherwise returns false.\r\n\t         */\r\n\t        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n\t            id = 9;\r\n\t            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         *  n - 0 = n\r\n\t         *  n - N = N\r\n\t         *  n - I = -I\r\n\t         *  0 - n = -n\r\n\t         *  0 - 0 = 0\r\n\t         *  0 - N = N\r\n\t         *  0 - I = -I\r\n\t         *  N - n = N\r\n\t         *  N - 0 = N\r\n\t         *  N - N = N\r\n\t         *  N - I = N\r\n\t         *  I - n = I\r\n\t         *  I - 0 = I\r\n\t         *  I - N = N\r\n\t         *  I - I = N\r\n\t         *\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n\t         * BigNumber(y, b).\r\n\t         */\r\n\t        P.minus = P.sub = function ( y, b ) {\r\n\t            var i, j, t, xLTy,\r\n\t                x = this,\r\n\t                a = x.s;\r\n\t\r\n\t            id = 10;\r\n\t            y = new BigNumber( y, b );\r\n\t            b = y.s;\r\n\t\r\n\t            // Either NaN?\r\n\t            if ( !a || !b ) return new BigNumber(NaN);\r\n\t\r\n\t            // Signs differ?\r\n\t            if ( a != b ) {\r\n\t                y.s = -b;\r\n\t                return x.plus(y);\r\n\t            }\r\n\t\r\n\t            var xe = x.e / LOG_BASE,\r\n\t                ye = y.e / LOG_BASE,\r\n\t                xc = x.c,\r\n\t                yc = y.c;\r\n\t\r\n\t            if ( !xe || !ye ) {\r\n\t\r\n\t                // Either Infinity?\r\n\t                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\t\r\n\t                // Either zero?\r\n\t                if ( !xc[0] || !yc[0] ) {\r\n\t\r\n\t                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n\t                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\t\r\n\t                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n\t                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n\t                }\r\n\t            }\r\n\t\r\n\t            xe = bitFloor(xe);\r\n\t            ye = bitFloor(ye);\r\n\t            xc = xc.slice();\r\n\t\r\n\t            // Determine which is the bigger number.\r\n\t            if ( a = xe - ye ) {\r\n\t\r\n\t                if ( xLTy = a < 0 ) {\r\n\t                    a = -a;\r\n\t                    t = xc;\r\n\t                } else {\r\n\t                    ye = xe;\r\n\t                    t = yc;\r\n\t                }\r\n\t\r\n\t                t.reverse();\r\n\t\r\n\t                // Prepend zeros to equalise exponents.\r\n\t                for ( b = a; b--; t.push(0) );\r\n\t                t.reverse();\r\n\t            } else {\r\n\t\r\n\t                // Exponents equal. Check digit by digit.\r\n\t                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\t\r\n\t                for ( a = b = 0; b < j; b++ ) {\r\n\t\r\n\t                    if ( xc[b] != yc[b] ) {\r\n\t                        xLTy = xc[b] < yc[b];\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t\r\n\t            // x < y? Point xc to the array of the bigger number.\r\n\t            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\t\r\n\t            b = ( j = yc.length ) - ( i = xc.length );\r\n\t\r\n\t            // Append zeros to xc if shorter.\r\n\t            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n\t            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n\t            b = BASE - 1;\r\n\t\r\n\t            // Subtract yc from xc.\r\n\t            for ( ; j > a; ) {\r\n\t\r\n\t                if ( xc[--j] < yc[j] ) {\r\n\t                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n\t                    --xc[i];\r\n\t                    xc[j] += BASE;\r\n\t                }\r\n\t\r\n\t                xc[j] -= yc[j];\r\n\t            }\r\n\t\r\n\t            // Remove leading zeros and adjust exponent accordingly.\r\n\t            for ( ; xc[0] == 0; xc.shift(), --ye );\r\n\t\r\n\t            // Zero?\r\n\t            if ( !xc[0] ) {\r\n\t\r\n\t                // Following IEEE 754 (2008) 6.3,\r\n\t                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n\t                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n\t                y.c = [ y.e = 0 ];\r\n\t                return y;\r\n\t            }\r\n\t\r\n\t            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n\t            // for finite x and y.\r\n\t            return normalise( y, xc, ye );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         *   n % 0 =  N\r\n\t         *   n % N =  N\r\n\t         *   n % I =  n\r\n\t         *   0 % n =  0\r\n\t         *  -0 % n = -0\r\n\t         *   0 % 0 =  N\r\n\t         *   0 % N =  N\r\n\t         *   0 % I =  0\r\n\t         *   N % n =  N\r\n\t         *   N % 0 =  N\r\n\t         *   N % N =  N\r\n\t         *   N % I =  N\r\n\t         *   I % n =  N\r\n\t         *   I % 0 =  N\r\n\t         *   I % N =  N\r\n\t         *   I % I =  N\r\n\t         *\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n\t         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n\t         */\r\n\t        P.modulo = P.mod = function ( y, b ) {\r\n\t            var q, s,\r\n\t                x = this;\r\n\t\r\n\t            id = 11;\r\n\t            y = new BigNumber( y, b );\r\n\t\r\n\t            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n\t            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n\t                return new BigNumber(NaN);\r\n\t\r\n\t            // Return x if y is Infinity or x is zero.\r\n\t            } else if ( !y.c || x.c && !x.c[0] ) {\r\n\t                return new BigNumber(x);\r\n\t            }\r\n\t\r\n\t            if ( MODULO_MODE == 9 ) {\r\n\t\r\n\t                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n\t                // r = x - qy    where  0 <= r < abs(y)\r\n\t                s = y.s;\r\n\t                y.s = 1;\r\n\t                q = div( x, y, 0, 3 );\r\n\t                y.s = s;\r\n\t                q.s *= s;\r\n\t            } else {\r\n\t                q = div( x, y, 0, MODULO_MODE );\r\n\t            }\r\n\t\r\n\t            return x.minus( q.times(y) );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n\t         * i.e. multiplied by -1.\r\n\t         */\r\n\t        P.negated = P.neg = function () {\r\n\t            var x = new BigNumber(this);\r\n\t            x.s = -x.s || null;\r\n\t            return x;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         *  n + 0 = n\r\n\t         *  n + N = N\r\n\t         *  n + I = I\r\n\t         *  0 + n = n\r\n\t         *  0 + 0 = 0\r\n\t         *  0 + N = N\r\n\t         *  0 + I = I\r\n\t         *  N + n = N\r\n\t         *  N + 0 = N\r\n\t         *  N + N = N\r\n\t         *  N + I = N\r\n\t         *  I + n = I\r\n\t         *  I + 0 = I\r\n\t         *  I + N = N\r\n\t         *  I + I = I\r\n\t         *\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n\t         * BigNumber(y, b).\r\n\t         */\r\n\t        P.plus = P.add = function ( y, b ) {\r\n\t            var t,\r\n\t                x = this,\r\n\t                a = x.s;\r\n\t\r\n\t            id = 12;\r\n\t            y = new BigNumber( y, b );\r\n\t            b = y.s;\r\n\t\r\n\t            // Either NaN?\r\n\t            if ( !a || !b ) return new BigNumber(NaN);\r\n\t\r\n\t            // Signs differ?\r\n\t             if ( a != b ) {\r\n\t                y.s = -b;\r\n\t                return x.minus(y);\r\n\t            }\r\n\t\r\n\t            var xe = x.e / LOG_BASE,\r\n\t                ye = y.e / LOG_BASE,\r\n\t                xc = x.c,\r\n\t                yc = y.c;\r\n\t\r\n\t            if ( !xe || !ye ) {\r\n\t\r\n\t                // Return ±Infinity if either ±Infinity.\r\n\t                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\t\r\n\t                // Either zero?\r\n\t                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n\t                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n\t            }\r\n\t\r\n\t            xe = bitFloor(xe);\r\n\t            ye = bitFloor(ye);\r\n\t            xc = xc.slice();\r\n\t\r\n\t            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n\t            if ( a = xe - ye ) {\r\n\t                if ( a > 0 ) {\r\n\t                    ye = xe;\r\n\t                    t = yc;\r\n\t                } else {\r\n\t                    a = -a;\r\n\t                    t = xc;\r\n\t                }\r\n\t\r\n\t                t.reverse();\r\n\t                for ( ; a--; t.push(0) );\r\n\t                t.reverse();\r\n\t            }\r\n\t\r\n\t            a = xc.length;\r\n\t            b = yc.length;\r\n\t\r\n\t            // Point xc to the longer array, and b to the shorter length.\r\n\t            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\t\r\n\t            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n\t            for ( a = 0; b; ) {\r\n\t                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n\t                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n\t            }\r\n\t\r\n\t            if (a) {\r\n\t                xc.unshift(a);\r\n\t                ++ye;\r\n\t            }\r\n\t\r\n\t            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\t            // ye = MAX_EXP + 1 possible\r\n\t            return normalise( y, xc, ye );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return the number of significant digits of the value of this BigNumber.\r\n\t         *\r\n\t         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n\t         */\r\n\t        P.precision = P.sd = function (z) {\r\n\t            var n, v,\r\n\t                x = this,\r\n\t                c = x.c;\r\n\t\r\n\t            // 'precision() argument not a boolean or binary digit: {z}'\r\n\t            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n\t                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n\t                if ( z != !!z ) z = null;\r\n\t            }\r\n\t\r\n\t            if ( !c ) return null;\r\n\t            v = c.length - 1;\r\n\t            n = v * LOG_BASE + 1;\r\n\t\r\n\t            if ( v = c[v] ) {\r\n\t\r\n\t                // Subtract the number of trailing zeros of the last element.\r\n\t                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\t\r\n\t                // Add the number of digits of the first element.\r\n\t                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n\t            }\r\n\t\r\n\t            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\t\r\n\t            return n;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n\t         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n\t         * omitted.\r\n\t         *\r\n\t         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t         *\r\n\t         * 'round() decimal places out of range: {dp}'\r\n\t         * 'round() decimal places not an integer: {dp}'\r\n\t         * 'round() rounding mode not an integer: {rm}'\r\n\t         * 'round() rounding mode out of range: {rm}'\r\n\t         */\r\n\t        P.round = function ( dp, rm ) {\r\n\t            var n = new BigNumber(this);\r\n\t\r\n\t            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n\t                round( n, ~~dp + this.e + 1, rm == null ||\r\n\t                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n\t            }\r\n\t\r\n\t            return n;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n\t         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n\t         *\r\n\t         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n\t         *\r\n\t         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n\t         * otherwise.\r\n\t         *\r\n\t         * 'shift() argument not an integer: {k}'\r\n\t         * 'shift() argument out of range: {k}'\r\n\t         */\r\n\t        P.shift = function (k) {\r\n\t            var n = this;\r\n\t            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\t\r\n\t              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n\t              ? n.times( '1e' + truncate(k) )\r\n\t              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n\t                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n\t                : n );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         *  sqrt(-n) =  N\r\n\t         *  sqrt( N) =  N\r\n\t         *  sqrt(-I) =  N\r\n\t         *  sqrt( I) =  I\r\n\t         *  sqrt( 0) =  0\r\n\t         *  sqrt(-0) = -0\r\n\t         *\r\n\t         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n\t         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t         */\r\n\t        P.squareRoot = P.sqrt = function () {\r\n\t            var m, n, r, rep, t,\r\n\t                x = this,\r\n\t                c = x.c,\r\n\t                s = x.s,\r\n\t                e = x.e,\r\n\t                dp = DECIMAL_PLACES + 4,\r\n\t                half = new BigNumber('0.5');\r\n\t\r\n\t            // Negative/NaN/Infinity/zero?\r\n\t            if ( s !== 1 || !c || !c[0] ) {\r\n\t                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n\t            }\r\n\t\r\n\t            // Initial estimate.\r\n\t            s = Math.sqrt( +x );\r\n\t\r\n\t            // Math.sqrt underflow/overflow?\r\n\t            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n\t            if ( s == 0 || s == 1 / 0 ) {\r\n\t                n = coeffToString(c);\r\n\t                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n\t                s = Math.sqrt(n);\r\n\t                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\t\r\n\t                if ( s == 1 / 0 ) {\r\n\t                    n = '1e' + e;\r\n\t                } else {\r\n\t                    n = s.toExponential();\r\n\t                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n\t                }\r\n\t\r\n\t                r = new BigNumber(n);\r\n\t            } else {\r\n\t                r = new BigNumber( s + '' );\r\n\t            }\r\n\t\r\n\t            // Check for zero.\r\n\t            // r could be zero if MIN_EXP is changed after the this value was created.\r\n\t            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n\t            // coeffToString to throw.\r\n\t            if ( r.c[0] ) {\r\n\t                e = r.e;\r\n\t                s = e + dp;\r\n\t                if ( s < 3 ) s = 0;\r\n\t\r\n\t                // Newton-Raphson iteration.\r\n\t                for ( ; ; ) {\r\n\t                    t = r;\r\n\t                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\t\r\n\t                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n\t                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\t\r\n\t                        // The exponent of r may here be one less than the final result exponent,\r\n\t                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n\t                        // are indexed correctly.\r\n\t                        if ( r.e < e ) --s;\r\n\t                        n = n.slice( s - 3, s + 1 );\r\n\t\r\n\t                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n\t                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n\t                        // iteration.\r\n\t                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\t\r\n\t                            // On the first iteration only, check to see if rounding up gives the\r\n\t                            // exact result as the nines may infinitely repeat.\r\n\t                            if ( !rep ) {\r\n\t                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\t\r\n\t                                if ( t.times(t).eq(x) ) {\r\n\t                                    r = t;\r\n\t                                    break;\r\n\t                                }\r\n\t                            }\r\n\t\r\n\t                            dp += 4;\r\n\t                            s += 4;\r\n\t                            rep = 1;\r\n\t                        } else {\r\n\t\r\n\t                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n\t                            // result. If not, then there are further digits and m will be truthy.\r\n\t                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\t\r\n\t                                // Truncate to the first rounding digit.\r\n\t                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n\t                                m = !r.times(r).eq(x);\r\n\t                            }\r\n\t\r\n\t                            break;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t\r\n\t            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         *  n * 0 = 0\r\n\t         *  n * N = N\r\n\t         *  n * I = I\r\n\t         *  0 * n = 0\r\n\t         *  0 * 0 = 0\r\n\t         *  0 * N = N\r\n\t         *  0 * I = N\r\n\t         *  N * n = N\r\n\t         *  N * 0 = N\r\n\t         *  N * N = N\r\n\t         *  N * I = N\r\n\t         *  I * n = I\r\n\t         *  I * 0 = N\r\n\t         *  I * N = N\r\n\t         *  I * I = I\r\n\t         *\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n\t         * BigNumber(y, b).\r\n\t         */\r\n\t        P.times = P.mul = function ( y, b ) {\r\n\t            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n\t                base, sqrtBase,\r\n\t                x = this,\r\n\t                xc = x.c,\r\n\t                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\t\r\n\t            // Either NaN, ±Infinity or ±0?\r\n\t            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\t\r\n\t                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n\t                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n\t                    y.c = y.e = y.s = null;\r\n\t                } else {\r\n\t                    y.s *= x.s;\r\n\t\r\n\t                    // Return ±Infinity if either is ±Infinity.\r\n\t                    if ( !xc || !yc ) {\r\n\t                        y.c = y.e = null;\r\n\t\r\n\t                    // Return ±0 if either is ±0.\r\n\t                    } else {\r\n\t                        y.c = [0];\r\n\t                        y.e = 0;\r\n\t                    }\r\n\t                }\r\n\t\r\n\t                return y;\r\n\t            }\r\n\t\r\n\t            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n\t            y.s *= x.s;\r\n\t            xcL = xc.length;\r\n\t            ycL = yc.length;\r\n\t\r\n\t            // Ensure xc points to longer array and xcL to its length.\r\n\t            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\t\r\n\t            // Initialise the result array with zeros.\r\n\t            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\t\r\n\t            base = BASE;\r\n\t            sqrtBase = SQRT_BASE;\r\n\t\r\n\t            for ( i = ycL; --i >= 0; ) {\r\n\t                c = 0;\r\n\t                ylo = yc[i] % sqrtBase;\r\n\t                yhi = yc[i] / sqrtBase | 0;\r\n\t\r\n\t                for ( k = xcL, j = i + k; j > i; ) {\r\n\t                    xlo = xc[--k] % sqrtBase;\r\n\t                    xhi = xc[k] / sqrtBase | 0;\r\n\t                    m = yhi * xlo + xhi * ylo;\r\n\t                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n\t                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n\t                    zc[j--] = xlo % base;\r\n\t                }\r\n\t\r\n\t                zc[j] = c;\r\n\t            }\r\n\t\r\n\t            if (c) {\r\n\t                ++e;\r\n\t            } else {\r\n\t                zc.shift();\r\n\t            }\r\n\t\r\n\t            return normalise( y, zc, e );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n\t         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n\t         *\r\n\t         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n\t         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t         *\r\n\t         * 'toDigits() precision out of range: {sd}'\r\n\t         * 'toDigits() precision not an integer: {sd}'\r\n\t         * 'toDigits() rounding mode not an integer: {rm}'\r\n\t         * 'toDigits() rounding mode out of range: {rm}'\r\n\t         */\r\n\t        P.toDigits = function ( sd, rm ) {\r\n\t            var n = new BigNumber(this);\r\n\t            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n\t            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n\t            return sd ? round( n, sd, rm ) : n;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a string representing the value of this BigNumber in exponential notation and\r\n\t         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n\t         *\r\n\t         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t         *\r\n\t         * 'toExponential() decimal places not an integer: {dp}'\r\n\t         * 'toExponential() decimal places out of range: {dp}'\r\n\t         * 'toExponential() rounding mode not an integer: {rm}'\r\n\t         * 'toExponential() rounding mode out of range: {rm}'\r\n\t         */\r\n\t        P.toExponential = function ( dp, rm ) {\r\n\t            return format( this,\r\n\t              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n\t         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n\t         *\r\n\t         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n\t         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n\t         *\r\n\t         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t         *\r\n\t         * 'toFixed() decimal places not an integer: {dp}'\r\n\t         * 'toFixed() decimal places out of range: {dp}'\r\n\t         * 'toFixed() rounding mode not an integer: {rm}'\r\n\t         * 'toFixed() rounding mode out of range: {rm}'\r\n\t         */\r\n\t        P.toFixed = function ( dp, rm ) {\r\n\t            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n\t              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n\t         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n\t         * of the FORMAT object (see BigNumber.config).\r\n\t         *\r\n\t         * FORMAT = {\r\n\t         *      decimalSeparator : '.',\r\n\t         *      groupSeparator : ',',\r\n\t         *      groupSize : 3,\r\n\t         *      secondaryGroupSize : 0,\r\n\t         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n\t         *      fractionGroupSize : 0\r\n\t         * };\r\n\t         *\r\n\t         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t         *\r\n\t         * 'toFormat() decimal places not an integer: {dp}'\r\n\t         * 'toFormat() decimal places out of range: {dp}'\r\n\t         * 'toFormat() rounding mode not an integer: {rm}'\r\n\t         * 'toFormat() rounding mode out of range: {rm}'\r\n\t         */\r\n\t        P.toFormat = function ( dp, rm ) {\r\n\t            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n\t              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\t\r\n\t            if ( this.c ) {\r\n\t                var i,\r\n\t                    arr = str.split('.'),\r\n\t                    g1 = +FORMAT.groupSize,\r\n\t                    g2 = +FORMAT.secondaryGroupSize,\r\n\t                    groupSeparator = FORMAT.groupSeparator,\r\n\t                    intPart = arr[0],\r\n\t                    fractionPart = arr[1],\r\n\t                    isNeg = this.s < 0,\r\n\t                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n\t                    len = intDigits.length;\r\n\t\r\n\t                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\t\r\n\t                if ( g1 > 0 && len > 0 ) {\r\n\t                    i = len % g1 || g1;\r\n\t                    intPart = intDigits.substr( 0, i );\r\n\t\r\n\t                    for ( ; i < len; i += g1 ) {\r\n\t                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n\t                    }\r\n\t\r\n\t                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n\t                    if (isNeg) intPart = '-' + intPart;\r\n\t                }\r\n\t\r\n\t                str = fractionPart\r\n\t                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n\t                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n\t                      '$&' + FORMAT.fractionGroupSeparator )\r\n\t                    : fractionPart )\r\n\t                  : intPart;\r\n\t            }\r\n\t\r\n\t            return str;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n\t         * an integer numerator and an integer denominator. The denominator will be a positive\r\n\t         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n\t         * denominator is not specified, the denominator will be the lowest value necessary to\r\n\t         * represent the number exactly.\r\n\t         *\r\n\t         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n\t         *\r\n\t         * 'toFraction() max denominator not an integer: {md}'\r\n\t         * 'toFraction() max denominator out of range: {md}'\r\n\t         */\r\n\t        P.toFraction = function (md) {\r\n\t            var arr, d0, d2, e, exp, n, n0, q, s,\r\n\t                k = ERRORS,\r\n\t                x = this,\r\n\t                xc = x.c,\r\n\t                d = new BigNumber(ONE),\r\n\t                n1 = d0 = new BigNumber(ONE),\r\n\t                d1 = n0 = new BigNumber(ONE);\r\n\t\r\n\t            if ( md != null ) {\r\n\t                ERRORS = false;\r\n\t                n = new BigNumber(md);\r\n\t                ERRORS = k;\r\n\t\r\n\t                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\t\r\n\t                    if (ERRORS) {\r\n\t                        raise( 22,\r\n\t                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n\t                    }\r\n\t\r\n\t                    // ERRORS is false:\r\n\t                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n\t                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n\t                }\r\n\t            }\r\n\t\r\n\t            if ( !xc ) return x.toString();\r\n\t            s = coeffToString(xc);\r\n\t\r\n\t            // Determine initial denominator.\r\n\t            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n\t            e = d.e = s.length - x.e - 1;\r\n\t            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n\t            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\t\r\n\t            exp = MAX_EXP;\r\n\t            MAX_EXP = 1 / 0;\r\n\t            n = new BigNumber(s);\r\n\t\r\n\t            // n0 = d1 = 0\r\n\t            n0.c[0] = 0;\r\n\t\r\n\t            for ( ; ; )  {\r\n\t                q = div( n, d, 0, 1 );\r\n\t                d2 = d0.plus( q.times(d1) );\r\n\t                if ( d2.cmp(md) == 1 ) break;\r\n\t                d0 = d1;\r\n\t                d1 = d2;\r\n\t                n1 = n0.plus( q.times( d2 = n1 ) );\r\n\t                n0 = d2;\r\n\t                d = n.minus( q.times( d2 = d ) );\r\n\t                n = d2;\r\n\t            }\r\n\t\r\n\t            d2 = div( md.minus(d0), d1, 0, 1 );\r\n\t            n0 = n0.plus( d2.times(n1) );\r\n\t            d0 = d0.plus( d2.times(d1) );\r\n\t            n0.s = n1.s = x.s;\r\n\t            e *= 2;\r\n\t\r\n\t            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n\t            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n\t                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n\t                    ? [ n1.toString(), d1.toString() ]\r\n\t                    : [ n0.toString(), d0.toString() ];\r\n\t\r\n\t            MAX_EXP = exp;\r\n\t            return arr;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return the value of this BigNumber converted to a number primitive.\r\n\t         */\r\n\t        P.toNumber = function () {\r\n\t            return +this;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n\t         * If m is present, return the result modulo m.\r\n\t         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n\t         * ROUNDING_MODE.\r\n\t         *\r\n\t         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n\t         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n\t         *\r\n\t         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n\t         * [m] {number|string|BigNumber} The modulus.\r\n\t         *\r\n\t         * 'pow() exponent not an integer: {n}'\r\n\t         * 'pow() exponent out of range: {n}'\r\n\t         *\r\n\t         * Performs 54 loop iterations for n of 9007199254740991.\r\n\t         */\r\n\t        P.toPower = P.pow = function ( n, m ) {\r\n\t            var k, y, z,\r\n\t                i = mathfloor( n < 0 ? -n : +n ),\r\n\t                x = this;\r\n\t\r\n\t            if ( m != null ) {\r\n\t                id = 23;\r\n\t                m = new BigNumber(m);\r\n\t            }\r\n\t\r\n\t            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n\t            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n\t              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n\t                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {\r\n\t                k = Math.pow( +x, n );\r\n\t                return new BigNumber( m ? k % m : k );\r\n\t            }\r\n\t\r\n\t            if (m) {\r\n\t                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {\r\n\t                    x = x.mod(m);\r\n\t                } else {\r\n\t                    z = m;\r\n\t\r\n\t                    // Nullify m so only a single mod operation is performed at the end.\r\n\t                    m = null;\r\n\t                }\r\n\t            } else if (POW_PRECISION) {\r\n\t\r\n\t                // Truncating each coefficient array to a length of k after each multiplication\r\n\t                // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n\t                // i.e. there will be a minimum of 28 guard digits retained.\r\n\t                // (Using + 1.5 would give [9, 21] guard digits.)\r\n\t                k = mathceil( POW_PRECISION / LOG_BASE + 2 );\r\n\t            }\r\n\t\r\n\t            y = new BigNumber(ONE);\r\n\t\r\n\t            for ( ; ; ) {\r\n\t                if ( i % 2 ) {\r\n\t                    y = y.times(x);\r\n\t                    if ( !y.c ) break;\r\n\t                    if (k) {\r\n\t                        if ( y.c.length > k ) y.c.length = k;\r\n\t                    } else if (m) {\r\n\t                        y = y.mod(m);\r\n\t                    }\r\n\t                }\r\n\t\r\n\t                i = mathfloor( i / 2 );\r\n\t                if ( !i ) break;\r\n\t                x = x.times(x);\r\n\t                if (k) {\r\n\t                    if ( x.c && x.c.length > k ) x.c.length = k;\r\n\t                } else if (m) {\r\n\t                    x = x.mod(m);\r\n\t                }\r\n\t            }\r\n\t\r\n\t            if (m) return y;\r\n\t            if ( n < 0 ) y = ONE.div(y);\r\n\t\r\n\t            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n\t         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n\t         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n\t         * exponential notation.\r\n\t         *\r\n\t         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n\t         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t         *\r\n\t         * 'toPrecision() precision not an integer: {sd}'\r\n\t         * 'toPrecision() precision out of range: {sd}'\r\n\t         * 'toPrecision() rounding mode not an integer: {rm}'\r\n\t         * 'toPrecision() rounding mode out of range: {rm}'\r\n\t         */\r\n\t        P.toPrecision = function ( sd, rm ) {\r\n\t            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n\t              ? sd | 0 : null, rm, 24 );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n\t         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n\t         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n\t         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n\t         * TO_EXP_NEG, return exponential notation.\r\n\t         *\r\n\t         * [b] {number} Integer, 2 to 64 inclusive.\r\n\t         *\r\n\t         * 'toString() base not an integer: {b}'\r\n\t         * 'toString() base out of range: {b}'\r\n\t         */\r\n\t        P.toString = function (b) {\r\n\t            var str,\r\n\t                n = this,\r\n\t                s = n.s,\r\n\t                e = n.e;\r\n\t\r\n\t            // Infinity or NaN?\r\n\t            if ( e === null ) {\r\n\t\r\n\t                if (s) {\r\n\t                    str = 'Infinity';\r\n\t                    if ( s < 0 ) str = '-' + str;\r\n\t                } else {\r\n\t                    str = 'NaN';\r\n\t                }\r\n\t            } else {\r\n\t                str = coeffToString( n.c );\r\n\t\r\n\t                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n\t                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n\t                      ? toExponential( str, e )\r\n\t                      : toFixedPoint( str, e );\r\n\t                } else {\r\n\t                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n\t                }\r\n\t\r\n\t                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n\t            }\r\n\t\r\n\t            return str;\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n\t         * number.\r\n\t         */\r\n\t        P.truncated = P.trunc = function () {\r\n\t            return round( new BigNumber(this), this.e + 1, 1 );\r\n\t        };\r\n\t\r\n\t\r\n\t        /*\r\n\t         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n\t         * negative zero.\r\n\t         */\r\n\t        P.valueOf = P.toJSON = function () {\r\n\t            var str,\r\n\t                n = this,\r\n\t                e = n.e;\r\n\t\r\n\t            if ( e === null ) return n.toString();\r\n\t\r\n\t            str = coeffToString( n.c );\r\n\t\r\n\t            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n\t                ? toExponential( str, e )\r\n\t                : toFixedPoint( str, e );\r\n\t\r\n\t            return n.s < 0 ? '-' + str : str;\r\n\t        };\r\n\t\r\n\t\r\n\t        P.isBigNumber = true;\r\n\t\r\n\t        if ( config != null ) BigNumber.config(config);\r\n\t\r\n\t        return BigNumber;\r\n\t    }\r\n\t\r\n\t\r\n\t    // PRIVATE HELPER FUNCTIONS\r\n\t\r\n\t\r\n\t    function bitFloor(n) {\r\n\t        var i = n | 0;\r\n\t        return n > 0 || n === i ? i : i - 1;\r\n\t    }\r\n\t\r\n\t\r\n\t    // Return a coefficient array as a string of base 10 digits.\r\n\t    function coeffToString(a) {\r\n\t        var s, z,\r\n\t            i = 1,\r\n\t            j = a.length,\r\n\t            r = a[0] + '';\r\n\t\r\n\t        for ( ; i < j; ) {\r\n\t            s = a[i++] + '';\r\n\t            z = LOG_BASE - s.length;\r\n\t            for ( ; z--; s = '0' + s );\r\n\t            r += s;\r\n\t        }\r\n\t\r\n\t        // Determine trailing zeros.\r\n\t        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n\t        return r.slice( 0, j + 1 || 1 );\r\n\t    }\r\n\t\r\n\t\r\n\t    // Compare the value of BigNumbers x and y.\r\n\t    function compare( x, y ) {\r\n\t        var a, b,\r\n\t            xc = x.c,\r\n\t            yc = y.c,\r\n\t            i = x.s,\r\n\t            j = y.s,\r\n\t            k = x.e,\r\n\t            l = y.e;\r\n\t\r\n\t        // Either NaN?\r\n\t        if ( !i || !j ) return null;\r\n\t\r\n\t        a = xc && !xc[0];\r\n\t        b = yc && !yc[0];\r\n\t\r\n\t        // Either zero?\r\n\t        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\t\r\n\t        // Signs differ?\r\n\t        if ( i != j ) return i;\r\n\t\r\n\t        a = i < 0;\r\n\t        b = k == l;\r\n\t\r\n\t        // Either Infinity?\r\n\t        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\t\r\n\t        // Compare exponents.\r\n\t        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\t\r\n\t        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\t\r\n\t        // Compare digit by digit.\r\n\t        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\t\r\n\t        // Compare lengths.\r\n\t        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n\t    }\r\n\t\r\n\t\r\n\t    /*\r\n\t     * Return true if n is a valid number in range, otherwise false.\r\n\t     * Use for argument validation when ERRORS is false.\r\n\t     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n\t     */\r\n\t    function intValidatorNoErrors( n, min, max ) {\r\n\t        return ( n = truncate(n) ) >= min && n <= max;\r\n\t    }\r\n\t\r\n\t\r\n\t    function isArray(obj) {\r\n\t        return Object.prototype.toString.call(obj) == '[object Array]';\r\n\t    }\r\n\t\r\n\t\r\n\t    /*\r\n\t     * Convert string of baseIn to an array of numbers of baseOut.\r\n\t     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n\t     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n\t     */\r\n\t    function toBaseOut( str, baseIn, baseOut ) {\r\n\t        var j,\r\n\t            arr = [0],\r\n\t            arrL,\r\n\t            i = 0,\r\n\t            len = str.length;\r\n\t\r\n\t        for ( ; i < len; ) {\r\n\t            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n\t            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\t\r\n\t            for ( ; j < arr.length; j++ ) {\r\n\t\r\n\t                if ( arr[j] > baseOut - 1 ) {\r\n\t                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n\t                    arr[j + 1] += arr[j] / baseOut | 0;\r\n\t                    arr[j] %= baseOut;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t\r\n\t        return arr.reverse();\r\n\t    }\r\n\t\r\n\t\r\n\t    function toExponential( str, e ) {\r\n\t        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n\t          ( e < 0 ? 'e' : 'e+' ) + e;\r\n\t    }\r\n\t\r\n\t\r\n\t    function toFixedPoint( str, e ) {\r\n\t        var len, z;\r\n\t\r\n\t        // Negative exponent?\r\n\t        if ( e < 0 ) {\r\n\t\r\n\t            // Prepend zeros.\r\n\t            for ( z = '0.'; ++e; z += '0' );\r\n\t            str = z + str;\r\n\t\r\n\t        // Positive exponent\r\n\t        } else {\r\n\t            len = str.length;\r\n\t\r\n\t            // Append zeros.\r\n\t            if ( ++e > len ) {\r\n\t                for ( z = '0', e -= len; --e; z += '0' );\r\n\t                str += z;\r\n\t            } else if ( e < len ) {\r\n\t                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n\t            }\r\n\t        }\r\n\t\r\n\t        return str;\r\n\t    }\r\n\t\r\n\t\r\n\t    function truncate(n) {\r\n\t        n = parseFloat(n);\r\n\t        return n < 0 ? mathceil(n) : mathfloor(n);\r\n\t    }\r\n\t\r\n\t\r\n\t    // EXPORT\r\n\t\r\n\t\r\n\t    BigNumber = constructorFactory();\r\n\t    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\t\r\n\t\r\n\t    // AMD.\r\n\t    if ( true ) {\r\n\t        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return BigNumber; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t\r\n\t    // Node.js and other environments that support module.exports.\r\n\t    } else if ( typeof module != 'undefined' && module.exports ) {\r\n\t        module.exports = BigNumber;\r\n\t\r\n\t    // Browser.\r\n\t    } else {\r\n\t        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n\t        globalObj.BigNumber = BigNumber;\r\n\t    }\r\n\t})(this);\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.encode = encode;\n\texports.decode = decode;\n\t\n\tvar _bitmask = __webpack_require__(3);\n\t\n\tvar _timestamp = __webpack_require__(4);\n\t\n\tvar _uint = __webpack_require__(5);\n\t\n\tvar _utf8String = __webpack_require__(6);\n\t\n\tvar _encoder = __webpack_require__(7);\n\t\n\tvar _encoder2 = _interopRequireDefault(_encoder);\n\t\n\tvar _decoder = __webpack_require__(9);\n\t\n\tvar _decoder2 = _interopRequireDefault(_decoder);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar FORMAT_VERSION = 1;\n\tvar FORMAT_LENGTH = 134;\n\tvar CREATOR_NAME_LENGTH = 40;\n\tvar EXCURSION_ID_LENGTH = 5;\n\tvar EXCURSION_NAME_LENGTH = 60;\n\tvar PARTICIPANT_ID_LENGTH = 2;\n\tvar PARTICIPANT_NAME_LENGTH = 20;\n\tvar TYPES = ['bird', 'butterfly', 'flower', 'tree'];\n\t\n\tfunction encode(data, options) {\n\t  options = options || {};\n\t\n\t  var encoder = new _encoder2.default();\n\t  encoder.add(_uint.encode, FORMAT_VERSION, 1);\n\t  encoder.add(_utf8String.encode, data.excursion.creatorName, CREATOR_NAME_LENGTH);\n\t  encoder.add(_utf8String.encode, data.excursion.id, EXCURSION_ID_LENGTH);\n\t  encoder.add(_timestamp.encode, data.excursion.date);\n\t  encoder.add(_utf8String.encode, data.excursion.name, EXCURSION_NAME_LENGTH);\n\t  encoder.add(_utf8String.encode, data.excursion.participant.id, PARTICIPANT_ID_LENGTH);\n\t  encoder.add(_utf8String.encode, data.excursion.participant.name, PARTICIPANT_NAME_LENGTH);\n\t  encoder.add(_bitmask.encode, data.excursion.types, options.types || TYPES);\n\t  encoder.add(_bitmask.encode, data.excursion.zones);\n\t\n\t  if (encoder.bytes.length != FORMAT_LENGTH) {\n\t    throw new Error('Format 0 byte length should be 134 (got ' + encoder.bytes.length + ')');\n\t  }\n\t\n\t  return encoder.bytes;\n\t}\n\t\n\tfunction decode(string, options) {\n\t  options = options || {};\n\t\n\t  var decoder = new _decoder2.default(string);\n\t  if (decoder.bytes.length != FORMAT_LENGTH) {\n\t    throw new Error('Format 0 byte length should be 134 (got ' + decoder.bytes.length + ')');\n\t  }\n\t\n\t  return {\n\t    version: decoder.get(_uint.decode, 1),\n\t    excursion: {\n\t      creatorName: decoder.get(_utf8String.decode, CREATOR_NAME_LENGTH),\n\t      id: decoder.get(_utf8String.decode, EXCURSION_ID_LENGTH),\n\t      date: decoder.get(_timestamp.decode, 4),\n\t      name: decoder.get(_utf8String.decode, EXCURSION_NAME_LENGTH),\n\t      participant: {\n\t        id: decoder.get(_utf8String.decode, PARTICIPANT_ID_LENGTH),\n\t        name: decoder.get(_utf8String.decode, PARTICIPANT_NAME_LENGTH)\n\t      },\n\t      types: decoder.get(_bitmask.decode, TYPES),\n\t      zones: decoder.get(_bitmask.decode)\n\t    }\n\t  };\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.encode = encode;\n\texports.decode = decode;\n\t/**\r\n\t * Fills a byte array with a 1-byte bitmask that can be used to serialize up to 8 boolean flags.\r\n\t *\r\n\t * If no references are given, values must be numbers from 0 to 7.\r\n\t * For example, the values [ 1, 3 ] would be encoded as the integer 10 (or 00001010 in binary).\r\n\t *\r\n\t * If references are given, then each value must be one of the reference values.\r\n\t * The references array must not contain more than 32 items.\r\n\t * For example, the values [ 'foo', 'baz' ] with references [ 'foo', 'bar', 'baz' ]\r\n\t * would be encoded as the integer 5 (or 00000101 in binary).\r\n\t */\n\tfunction encode(bytes, offset, values, references) {\n\t  var byte = 0;\n\t\n\t  values.forEach(function (value, i) {\n\t\n\t    var bitmaskIndex = value;\n\t\n\t    // If references are given, convert the value to its index in the reference array\n\t    if (references) {\n\t      bitmaskIndex = references.indexOf(value);\n\t      if (bitmaskIndex < 0) {\n\t        throw new Error('Unknown bitmask value ' + value + ' (allowed: ' + references.join(', ') + ')');\n\t      } else if (bitmaskIndex > 7) {\n\t        throw new Error('References have too many values (' + references.length + ' > 32)');\n\t      }\n\t    } else if (!Number.isInteger(bitmaskIndex) || bitmaskIndex < 0 || bitmaskIndex > 31) {\n\t      throw new Error('Bitmask value ' + i + ' must be an integer between 0 and 31 or one of the reference values (got ' + bitmaskIndex + ')');\n\t    }\n\t\n\t    // Set the correct bit to 1 in the bitmask\n\t    byte = byte | 1 << bitmaskIndex;\n\t  });\n\t\n\t  // Add the byte to the array\n\t  bytes[offset] = byte;\n\t}\n\t\n\t/**\r\n\t * Decodes up to 8 boolean flags from a 1-byte bitmask at the specified position in a byte array.\r\n\t *\r\n\t * If no references are given, the indices of the active flags are returned, e.g. [ 1, 3 ].\r\n\t *\r\n\t * If references are given, the indices are converted to the correspond reference values,\r\n\t * e.g. [ 'foo', 'baz' ] if the decoded flags are [ 0, 2 ] and the references are [ 'foo', 'bar', 'baz' ].\r\n\t */\n\tfunction decode(bytes, offset, references) {\n\t\n\t  var values = [];\n\t  var byte = bytes[offset];\n\t\n\t  // Iterate over the 8 bits\n\t  for (var i = 0; i < 8; i++) {\n\t    // Check whether the bit at the current position is 1\n\t    var mask = 1 << i;\n\t    if ((byte & mask) > 0) {\n\t      // Add the index (or reference value) to the result array if that is the case\n\t      if (!references) {\n\t        values.push(i);\n\t      } else if (references[i]) {\n\t        values.push(references[i]);\n\t      }\n\t    }\n\t  }\n\t\n\t  return values;\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\texports.encode = encode;\n\texports.decode = decode;\n\t\n\tvar _uint = __webpack_require__(5);\n\t\n\t/**\r\n\t * Fills a byte array with a 4-byte integer representing the specified date in minutes.\r\n\t * Seconds and milliseconds are lost in the conversion.\r\n\t */\n\tfunction encode(bytes, offset, dateOrTimestamp) {\n\t\n\t  var timestamp = typeof dateOrTimestamp.getTime == 'function' ? dateOrTimestamp.getTime() : dateOrTimestamp;\n\t  if (!Number.isInteger(timestamp)) {\n\t    throw new Error('Timestamp must be an integer or a date (got a value of type ' + (typeof timestamp === 'undefined' ? 'undefined' : _typeof(timestamp)) + ')');\n\t  } else if (timestamp < 0) {\n\t    throw new Error('Timestamp must be positive (got ' + timestamp + ')');\n\t  }\n\t\n\t  var minutes = Math.floor(timestamp / 1000);\n\t  return (0, _uint.encode)(bytes, offset, minutes, 4);\n\t}\n\t\n\t/**\r\n\t * Decodes a date from a 4-byte number of minutes at the specified position in a byte array.\r\n\t */\n\tfunction decode(bytes, offset) {\n\t  var minutes = (0, _uint.decode)(bytes, offset, 4);\n\t  return new Date(minutes * 1000);\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.encode = encode;\n\texports.decode = decode;\n\t/**\r\n\t * Fills a byte array with the specified integer's bytes (in big endian order).\r\n\t *\r\n\t * Unsigned integers may only be serialized up to a precision of 6 bytes\r\n\t * (JavaScript numbers are doubles with a significand of 52 bits).\r\n\t */\n\tfunction encode(bytes, offset, number, byteSize) {\n\t  if (!Number.isInteger(number)) {\n\t    throw new Error(\"Number must be an integer\");\n\t  } else if (number < 0) {\n\t    throw new Error(\"Unsigned integer cannot be smaller than zero (got \" + number + \")\");\n\t  } else if (byteSize < 1) {\n\t    throw new Error(\"Unsigned integer cannot be encoded with less than one byte\");\n\t  } else if (byteSize > 6) {\n\t    throw new Error(\"Unsigned integer cannot be encoded with more than seven bytes\");\n\t  }\n\t\n\t  // Ensure the number is not larger than the maximum allowed by the specified byte size\n\t  var bits = byteSize * 8;\n\t  var max = Math.pow(2, bits) - 1;\n\t  if (number > max) {\n\t    throw new Error(\"Unsigned \" + byteSize + \" bytes integer cannot be greater than \" + max + \" (got \" + number + \")\");\n\t  }\n\t\n\t  // Add the specified number of bytes\n\t  var bound = offset + byteSize;\n\t  for (var i = offset; i < bound; i++) {\n\t    // For each byte, right-shift the number by the correct amount\n\t    // and take the last 8 bits (with & 0xFF) to obtain the byte to store at that position\n\t    // (e.g. for a 4 bytes integer, the first byte is right-shifted by 24,\n\t    // the second by 16, the third by 8 and the fourth by 0)\n\t    var bitShift = (bound - i - 1) * 8;\n\t    bytes[i] = 0xFF & number >> bitShift;\n\t  }\n\t}\n\t\n\t/**\r\n\t * Decodes an unsigned integer's bytes from the specified portion of a byte array (in big endian order).\r\n\t */\n\tfunction decode(bytes, offset, byteSize) {\n\t  if (byteSize < 1 || byteSize > 6) {\n\t    throw new Error(\"Unsigned integer byte size must be between 1 and 6 (got \" + byteSize + \")\");\n\t  }\n\t\n\t  var number = 0;\n\t  var bound = offset + byteSize;\n\t\n\t  // Iterate byte by byte over the specified range (from offset to offset + byteSize)\n\t  for (var i = offset; i < bound; i++) {\n\t    // Shift each byte's bits by the correct amount\n\t    // and add them to the result number\n\t    // (e.g. for a 4 bytes integer, the first byte is left-shifted by 24,\n\t    // the second by 16, the third by 8 and the fourth by 0)\n\t    var bitShift = (bound - i - 1) * 8;\n\t    number = number | bytes[i] << bitShift;\n\t  }\n\t\n\t  return number;\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.encode = encode;\n\texports.decode = decode;\n\t/**\r\n\t * Fills a byte array with the UTF-8 bytes of the specified string.\r\n\t *\r\n\t * If the string is longer than the specified length (in bytes), extra bytes are not serialized.\r\n\t * Extra spaces at the end of the string will be lost when decoding, as spaces are used for padding.\r\n\t */\n\tfunction encode(bytes, offset, string, length) {\n\t\n\t  var currentByte = offset;\n\t  var stringLength = string.length;\n\t\n\t  // For each character in the string...\n\t  for (var i = 0; i < stringLength; i++) {\n\t\n\t    var char = string[i];\n\t\n\t    // Convert the character to an array of UTF-8 bytes (1 to 4 bytes per character)\n\t    var utf8Bytes = stringToUtf8Bytes(char);\n\t\n\t    // Stop here if there are too many bytes (the rest of the string is ignored)\n\t    if (currentByte + utf8Bytes.length > offset + length) {\n\t      break;\n\t    }\n\t\n\t    // Add the character's UTF-8 bytes to the byte array\n\t    for (var j = 0; j < utf8Bytes.length; j++) {\n\t      bytes[currentByte + j] = utf8Bytes[j];\n\t    }\n\t\n\t    currentByte += utf8Bytes.length;\n\t  }\n\t\n\t  // If the string is not long enough to fill the expected length, pad it with spaces\n\t  var remainingBytes = offset + length - currentByte;\n\t  for (var _i = 0; _i < remainingBytes; _i++) {\n\t    bytes.push(0x20); // space\n\t  }\n\t\n\t  return bytes;\n\t}\n\t\n\t/**\r\n\t * Decodes a string from the UTF-8 bytes in the specified portion of a byte array.\r\n\t */\n\tfunction decode(bytes, offset, length) {\n\t\n\t  var stringBytes = bytes.slice(offset, offset + length);\n\t  var rawString = stringBytes.map(function (byte) {\n\t    return String.fromCodePoint(byte);\n\t  }).join('');\n\t\n\t  return decodeURIComponent(escape(rawString)).trim();\n\t}\n\t\n\t/**\r\n\t * Convers a string to an array containing all its character's UTF-8 bytes (1 to 4 bytes per character).\r\n\t */\n\tfunction stringToUtf8Bytes(string) {\n\t  return unescape(encodeURIComponent(string)).split('').map(function (char) {\n\t    return char.charCodeAt(0);\n\t  });\n\t}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _byte = __webpack_require__(8);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Utility class to progressively build a byte array and keep track of the current offset.\r\n\t */\n\tvar Encoder = function () {\n\t\n\t  /**\r\n\t   * Constructs an encoder with an empty byte array.\r\n\t   */\n\t  function Encoder() {\n\t    _classCallCheck(this, Encoder);\n\t\n\t    this.bytes = [];\n\t    this.offset = 0;\n\t  }\n\t\n\t  /**\r\n\t   * Calls the specified encoding function with this encoder's internal byte array, the\r\n\t   * current offset and the specified extra arguments. It's the responsibility of the\r\n\t   * encoding function to add more bytes to the array starting at the specified offset.\r\n\t   *\r\n\t   * The encoder will automatically increment its current offset by the number of new bytes\r\n\t   * added to the array, so subsequent calls will invoke encoding functions with greater offsets.\r\n\t   */\n\t\n\t\n\t  _createClass(Encoder, [{\n\t    key: 'add',\n\t    value: function add(encodeFunc) {\n\t\n\t      var currentLength = this.bytes.length;\n\t\n\t      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\t\n\t      args.unshift(this.bytes, this.offset);\n\t\n\t      var result = encodeFunc.apply(undefined, args);\n\t      this.offset += this.bytes.length - currentLength;\n\t\n\t      return result;\n\t    }\n\t  }]);\n\t\n\t  return Encoder;\n\t}();\n\t\n\texports.default = Encoder;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ensureByte = ensureByte;\n\t/**\r\n\t * Returns the specified value unchanged, but throws an error if it is not an integer between 0 and 255.\r\n\t */\n\tfunction ensureByte(byte) {\n\t  if (!Number.isInteger(byte)) {\n\t    throw new Error(\"Byte is not an integer (\" + byte + \")\");\n\t  } else if (byte < 0) {\n\t    throw new Error(\"Byte is too small (\" + byte + \" < 0)\");\n\t  } else if (byte > 255) {\n\t    throw new Error(\"Byte is too large (\" + byte + \" > 255)\");\n\t  }\n\t\n\t  return byte;\n\t}\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _byte = __webpack_require__(8);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Utility class to progressively decode a byte array and keep track of the current offset.\r\n\t */\n\tvar Decoder = function () {\n\t\n\t  /**\r\n\t   * Constructs a decoder for the specified byte array.\r\n\t   *\r\n\t   * A string can also be given in place of the byte array.\r\n\t   * It should contain only characters that can be represented with 1 byte in UTF-8.\r\n\t   */\n\t  function Decoder(bytes) {\n\t    _classCallCheck(this, Decoder);\n\t\n\t    this.offset = 0;\n\t    this.bytes = bytes;\n\t  }\n\t\n\t  /**\r\n\t   * Calls the specified decoding function with this decoder's internal byte array, the\r\n\t   * current offset and the specified extra arguments, and returns the result. It's the\r\n\t   * responsibility of the decoding function to extract the relevant bytes from the array,\r\n\t   * starting at the specified offset.\r\n\t   *\r\n\t   * If the last argument passed to the decoding function is a positive integer, the\r\n\t   * decoder will interpret it as the number of bytes that have been decoded and increment\r\n\t   * the current offset by that value. Otherwise, it will assume that only 1 byte has been\r\n\t   * decoded. Add an extra number argument if that is not the case.\r\n\t   */\n\t\n\t\n\t  _createClass(Decoder, [{\n\t    key: 'get',\n\t    value: function get(decodeFunc) {\n\t      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\t\n\t      var lastArg = args.length >= 1 ? args[args.length - 1] : undefined;\n\t\n\t      args.unshift(this.bytes, this.offset);\n\t\n\t      var result = decodeFunc.apply(undefined, args);\n\t\n\t      if (Number.isInteger(lastArg) && lastArg >= 1) {\n\t        this.offset += lastArg;\n\t      } else {\n\t        this.offset++;\n\t      }\n\t\n\t      return result;\n\t    }\n\t  }]);\n\t\n\t  return Decoder;\n\t}();\n\t\n\texports.default = Decoder;\n\n/***/ }\n/******/ ])\n});\n;\n"],"sourceRoot":"/source/"}